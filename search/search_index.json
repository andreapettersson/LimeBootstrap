{
    "docs": [
        {
            "location": "/",
            "text": "Introduction\n\n\nLime Bootstrap is made to make it easier, better and faster working with Actionpads in Lime CRM. The framework relies heavily on Knockout.js and Twitter Bootstrap, styled and adapted to Lime CRM. The framework is mainly used by simple configuration in combination with  many built in convinience functions but it is also very expandable through the use of custom components.\n\n\nThe framework is \"opininated and convention over configuration\", meaning there should be one and only one way to do things. If you find yourself writing lots of code to do something, or god forbid, needing to modify ANY file in the systems folder, you're propably doing it wrong. The framework is there to guide and help you.\n\n\nThese few steps can  act as a guide\n\n\n\n\n\n\nThe systems folder or \nlbs.html\n should never, ever be modified. You can achieve cool and smart functions without ever touching it.\n\n\n\n\n\n\nFollow the design guidelines:\n\n\n\n\nThe design should be flat, free from gradients and focused on content.\n\n\nThe actionpad is very narrow (~250px), use the height and not the width of the actionpad.\n\n\nUse appropriate colors\n\n\nUse appropriate icons\n\n\nDon't \"brand\" the solution with customers logo and colors.\n\n\n\n\n\n\n\n\nKeep ActionPad views free from advanced logic, use components for anything advanced\n\n\n\n\n\n\nContribute to a better framework, any improvements, errors or bugfixes will be committed to this git repository.\n\n\n\n\n\n\nHappy coding!",
            "title": "Introduction"
        },
        {
            "location": "/#introduction",
            "text": "Lime Bootstrap is made to make it easier, better and faster working with Actionpads in Lime CRM. The framework relies heavily on Knockout.js and Twitter Bootstrap, styled and adapted to Lime CRM. The framework is mainly used by simple configuration in combination with  many built in convinience functions but it is also very expandable through the use of custom components.  The framework is \"opininated and convention over configuration\", meaning there should be one and only one way to do things. If you find yourself writing lots of code to do something, or god forbid, needing to modify ANY file in the systems folder, you're propably doing it wrong. The framework is there to guide and help you.  These few steps can  act as a guide    The systems folder or  lbs.html  should never, ever be modified. You can achieve cool and smart functions without ever touching it.    Follow the design guidelines:   The design should be flat, free from gradients and focused on content.  The actionpad is very narrow (~250px), use the height and not the width of the actionpad.  Use appropriate colors  Use appropriate icons  Don't \"brand\" the solution with customers logo and colors.     Keep ActionPad views free from advanced logic, use components for anything advanced    Contribute to a better framework, any improvements, errors or bugfixes will be committed to this git repository.    Happy coding!",
            "title": "Introduction"
        },
        {
            "location": "/install/",
            "text": "Install & Update\n\n\nRequirements\n\n\nLime Bootstrap is only meant to be used inside Lime Crm, but for debugging reasons all functionality should work in any browser.\n\n\n\n\nInternet Explorer 11\n\n\nChrome 59+\n\n\n\n\nOlder versions of IE \nwon't\n work!\n\n\n\n\nLime 10.12 or greater\n\n\n\n\nInstall\n\n\nLime Bootstrap is included in the Lime Core database and nothing is needs to be done in this case. If installing Lime Bootstrap from scratch:\n\n\n\n\nCopy all the folders, \nlbs.html\n and \n_config.js\n to the Actionpad-folder\n\n\nAdd the VBA module \nlbshelper\n found in \nvba\n-folder.\n\n\nChange the URL of all Actionpads in Lime CRM to \nlbs.html\n\n\n\n\nIf you'll like the some basic ActionPad views to start with you can find some \nhere\n\n\n\n\nWarning\n\n\nPlease note that Windows sometimes blocks dowloaded javascript files. Make sure to right click and unblock javascript files\n\n\n\n\nUpdate\n\n\nUpdating Lime Bootstrap is done by downloading the lastest version and replacing some files and updating some VBA.\n\n\n\n\nReplace the system folder and \nlbs.html\n\n\nReplace the VBA module\n\n\n\n\n\n\nInfo\n\n\nIf you are upgrading from LBS 1.3 or older you also need to replace and upgrade \n_config.js",
            "title": "Installation"
        },
        {
            "location": "/install/#install-update",
            "text": "",
            "title": "Install &amp; Update"
        },
        {
            "location": "/install/#requirements",
            "text": "Lime Bootstrap is only meant to be used inside Lime Crm, but for debugging reasons all functionality should work in any browser.   Internet Explorer 11  Chrome 59+   Older versions of IE  won't  work!   Lime 10.12 or greater",
            "title": "Requirements"
        },
        {
            "location": "/install/#install",
            "text": "Lime Bootstrap is included in the Lime Core database and nothing is needs to be done in this case. If installing Lime Bootstrap from scratch:   Copy all the folders,  lbs.html  and  _config.js  to the Actionpad-folder  Add the VBA module  lbshelper  found in  vba -folder.  Change the URL of all Actionpads in Lime CRM to  lbs.html   If you'll like the some basic ActionPad views to start with you can find some  here   Warning  Please note that Windows sometimes blocks dowloaded javascript files. Make sure to right click and unblock javascript files",
            "title": "Install"
        },
        {
            "location": "/install/#update",
            "text": "Updating Lime Bootstrap is done by downloading the lastest version and replacing some files and updating some VBA.   Replace the system folder and  lbs.html  Replace the VBA module    Info  If you are upgrading from LBS 1.3 or older you also need to replace and upgrade  _config.js",
            "title": "Update"
        },
        {
            "location": "/getting_started/",
            "text": "Getting started\n\n\nA Lime Bootstrap Actionpad\n\n\nAn Actionpad built with Lime Bootstrap has the following structure:\n\n\n\n\n<\nlbs-hero\n \nparams\n=\n\"header: company.name, img: company\"\n>\n\n    \n<\nlbs-list-item\n \nparams\n=\n\"text: company.visitingcity, icon: 'fa-map-marker'\"\n \ndata-bind\n=\n\"openMap: company.fullvisitingaddress\"\n></\nli\n>\n\n    \n<\nlbs-list-item\n \nparams\n=\n\"text: company.phone, call: company.phone, icon: 'fa-phone'\"\n \ndata-bind\n=\n\"call: company.phone\"\n></\nli\n>\n\n    \n<\nlbs-list-item\n \nparams\n=\n\"text: company.www, openURL: company.www, icon: 'fa-globe'\"\n \ndata-bind\n=\n\"openURL: company.www\"\n></\nli\n>\n\n\n</\nlbs-hero\n>\n\n\n\n\n<\nlbs-menu\n \nparams\n=\n\"title: 'Functions', expanded: true\"\n>\n\n    \n<\nlbs-list-item\n \nparams\n=\n\"text: 'Copy postal address', icon: 'fa-calendar'\"\n \ndata-bind\n=\n\"click: runMyFunction\"\n></\nli\n>\n\n\n</\nlbs-menu\n>\n\n\n\n<\nlbs-menu\n \nparams\n=\n\"title: 'History', expanded: true\"\n>\n\n...\n\n</\nlbs-menu\n>\n\n\n\n\n\n\nAn ActionPad built with Lime Bootstrap has two main components; a \nView\n and a \nViewModel\n. Lime Bootstrap uses \nknockoutjs\n \nModel-View-ViewModel (MVVM)\n pattern.\n\n\nThe view\n\n\nThe view is a piece of HTML which descripes where elements should be placed. In the view we \nbind\n the data and functions of the \nViewModel\n to the view. Each ActionPad has an unique view, which is a partial html-file with the same name as the LimeType it is used with, for example `company.html``\n\n\nIn the \nview\nwe make heavy use of \ncomponents\n\n\nThe ViewModel\n\n\nThe ViewModel is a Javascript object containing your data and functions to interact with the View. You don't have any direct access to the ViewModel when building ActionPads. For direct access to a ViewModel you need to create a \nCustom Components\n. You have some indirect access to the ViewModel of an ActionPad through specifing which \ndata sources\n should be used in the file \n_config.js\n.\n\n\nConfiguration\n\n\nAll framework configuration is done in the file \n_config.js\n. Here you can load additional data, enabling the debug mode or load custom components.\n\n\nlbs\n.\nexternalConfig\n \n=\n \n{\n\n\n    \n/*\n\n\n    Enable or disable the debug-logging\n\n\n    */\n\n    \ndebug\n:\n \ntrue\n,\n\n\n    \n/*\n\n\n    Verbose levels:\n\n\n        debug   :   Shows all log levels\n\n\n        info    :   Shows information level and up\n\n\n        warn    :   Shows warning level and up\n\n\n        error   :   Shows only error level logs\n\n\n    */\n\n    \nverboseLevel\n:\n \n'warn'\n,\n\n\n    \n/*\n\n\n    Load custom components\n\n\n    */\n\n    \ncomponents\n:\n \n[\n\n        \n{\n \nname\n:\n \n'my-component'\n,\n \npath\n:\n \n'components/my-comp/my-comp.js'\n \n}\n\n    \n]\n\n\n    \n/*\n\n\n    Datasources to be used for each view\n\n\n    */\n\n    \nconfig\n:\n{\n\n        \nhelpdesk\n \n:\n \n{\n\n            \ndataSources\n:\n \n[\n\n                \n{\n \ntype\n:\n \n'activeLimeObject'\n,\n \nembed\n:\n \n[\n'person'\n]\n \n},\n\n                \n{\n \ntype\n:\n \n'translation'\n \n},\n\n                \n{\n \ntype\n:\n \n'relatedLimeObjects'\n,\n \nlimetype\n:\n \n'person'\n,\n \nalias\n:\n \n'person'\n \n},\n\n            \n]\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nComponents\n\n\nComponents are self contained specialized html elements, for example \n<lbs-hero>\n. We are using \nknockout components\n behind the scenes to create the components, but in essens it is very inspired of the emerging webstandard of web components. Several components are \nincluded\n but you have also the ability to \nbuild your own components\n or download community components from the \nAppStore\n\n\nSee all our components \nhere\n\n\nCustom Components and Apps\n\n\nLime Bootstraps allows you to create and custom components, as a compliment to the included components. Lime Bootstrap 1 had the concept of creating small apps. These apps still run fine in Lime Bootstrap 2.0, but it is prefered to use components.\n\n\nComponents and Apps can be found \nhere\n\n\nA Custom Component is added in \n_config.js\n and can then be used in the same way as any included component.\n\n\nTo start an app add this HTML to your view:\n\n\n<\ndiv\n \ndata-app\n=\n\"{app:'[Name of app]',\n\n\n                config:{\n\n\n                  [App config]\n\n\n            }}\"\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\nEach app has it's own instructions how to start and install them. Some apps require VBA and/or stored procedures to be added.\n\n\nTranslation\n\n\nAll available translations from the Localization table are automatically available in the actionpad context. The same language as the logged in user uses is automatically used. The translations are cached in a dictionary to increase speed, but requires you to run \nThisApplication.Setup\n to rebuild the dictionary if you add translations or make changes.\n\n\n<\nli\n \ndata-bind\n=\n\"text:localize.ActionPad_Todo.addTodo\"\n></\nli\n>\n\n\n\n\n\n\nThe example below uses the versatile knockout binding \nattr\n to add a tooltip with localization support. It also uses the custom Lime Bootstrap bindings \nvba\n and \nicon\n.\n\n\n<\nli\n \ndata-bind\n=\n\"vba:'Actionpad_Person.newComment', text:localize.Actionpad_Person.t_newcomment, icon:'fa-comment', attr: { title: localize.Actionpad_Person.tooltip_newcomment }\"\n></\nli\n>\n\n\n\n\n\n\nTechnical notes\n\n\nThe translations are added to the global view model and are thus available in your apps.\n\n\nNote that it is not possible to use localization in the standard way, e.g., \nlocalize.Actionpad_Person.t_newcomment\n within a block where you are using the knockout binding \nwith\n.\n\n\nFetching data from fields in Lime CRM\n\n\nAll fields from the ActiveInspector are automagically available for you to use in your view. The syntax is \n[Record class name].[field database name].[property]\n.\n\n\nThe available properties are (in order of relevance):\n\n   \n.text\n\n\n   \n.value\n\n*   \n.key\n  - \navailable for set and list fields_\n*   \n.class__ - \navailable for relation fields\n\n\n<!-- Company Actionpad showing the name of the company-->\n\n\n<\nli\n \ndata-bind\n=\n\"text:company.name.text\"\n></\nli\n>\n\n\n<!-- Shorthand-->\n<\nli\n>\n{{company.name.text}}\n</\nli\n>\n\n\n<!-- Person Actionpad using the id of the company relation as a parameter to a VBA-function. Note the Javascript syntax in the Knockout bindning  -->\n\n\n<\nli\n \ndata-bind\n=\n\"vba:'SomeFunction,' + person.company.value\"\n></\nli\n>\n\n\n<!-- Business Actionpad showing the optionKey from a set-list -->\n\n\n<\nli\n \ndata-bind\n=\n\"text:business.businesstatus.key\"\n></\nli\n>\n\n\n\n\n\n\nLoading additional data\n\n\nIt is common to use data from more than the ActiveInspector and the following syntax will NOT work \n<li data-bind=\"text:person.company.phone.text\"></li>\n\n\nInstead you can load additional data by requesting data sources in \n_config.js\n.\n\n\nThe loaded data can then be access by:\n\n\nAll avialable data sources can be found \nhere\n\n\n<!-- Loading person and company info on a helpdesk actionpad-->\n\n\n<\nli\n \ndata-bind\n=\n\"text:helpdesk.company.text\"\n></\nli\n>\n\n\n<\nli\n \ndata-bind\n=\n\"text:person.phone.text\"\n></\nli\n>\n\n\n<\nli\n \ndata-bind\n=\n\"text:person.mobilephone.text\"\n></\nli\n>\n\n\n<\nli\n \ndata-bind\n=\n\"text:company.phone.text\"\n></\nli\n>\n\n\n\n\n\n\nKeyboard shortcuts\n\n\nThe different view can be opened with shortcuts provided the actionpad is in focus.\n\n\n\n\n\n\n\n\nFunction\n\n\nCommand\n\n\n\n\n\n\n\n\n\n\nReload actionpad\n\n\nctrl + shift + r",
            "title": "Getting started"
        },
        {
            "location": "/getting_started/#getting-started",
            "text": "",
            "title": "Getting started"
        },
        {
            "location": "/getting_started/#a-lime-bootstrap-actionpad",
            "text": "An Actionpad built with Lime Bootstrap has the following structure:   < lbs-hero   params = \"header: company.name, img: company\" > \n     < lbs-list-item   params = \"text: company.visitingcity, icon: 'fa-map-marker'\"   data-bind = \"openMap: company.fullvisitingaddress\" ></ li > \n     < lbs-list-item   params = \"text: company.phone, call: company.phone, icon: 'fa-phone'\"   data-bind = \"call: company.phone\" ></ li > \n     < lbs-list-item   params = \"text: company.www, openURL: company.www, icon: 'fa-globe'\"   data-bind = \"openURL: company.www\" ></ li >  </ lbs-hero >  < lbs-menu   params = \"title: 'Functions', expanded: true\" > \n     < lbs-list-item   params = \"text: 'Copy postal address', icon: 'fa-calendar'\"   data-bind = \"click: runMyFunction\" ></ li >  </ lbs-menu >  < lbs-menu   params = \"title: 'History', expanded: true\" > \n... </ lbs-menu >   An ActionPad built with Lime Bootstrap has two main components; a  View  and a  ViewModel . Lime Bootstrap uses  knockoutjs   Model-View-ViewModel (MVVM)  pattern.",
            "title": "A Lime Bootstrap Actionpad"
        },
        {
            "location": "/getting_started/#the-view",
            "text": "The view is a piece of HTML which descripes where elements should be placed. In the view we  bind  the data and functions of the  ViewModel  to the view. Each ActionPad has an unique view, which is a partial html-file with the same name as the LimeType it is used with, for example `company.html``  In the  view we make heavy use of  components",
            "title": "The view"
        },
        {
            "location": "/getting_started/#the-viewmodel",
            "text": "The ViewModel is a Javascript object containing your data and functions to interact with the View. You don't have any direct access to the ViewModel when building ActionPads. For direct access to a ViewModel you need to create a  Custom Components . You have some indirect access to the ViewModel of an ActionPad through specifing which  data sources  should be used in the file  _config.js .",
            "title": "The ViewModel"
        },
        {
            "location": "/getting_started/#configuration",
            "text": "All framework configuration is done in the file  _config.js . Here you can load additional data, enabling the debug mode or load custom components.  lbs . externalConfig   =   { \n\n     /*      Enable or disable the debug-logging      */ \n     debug :   true , \n\n     /*      Verbose levels:          debug   :   Shows all log levels          info    :   Shows information level and up          warn    :   Shows warning level and up          error   :   Shows only error level logs      */ \n     verboseLevel :   'warn' , \n\n     /*      Load custom components      */ \n     components :   [ \n         {   name :   'my-component' ,   path :   'components/my-comp/my-comp.js'   } \n     ] \n\n     /*      Datasources to be used for each view      */ \n     config : { \n         helpdesk   :   { \n             dataSources :   [ \n                 {   type :   'activeLimeObject' ,   embed :   [ 'person' ]   }, \n                 {   type :   'translation'   }, \n                 {   type :   'relatedLimeObjects' ,   limetype :   'person' ,   alias :   'person'   }, \n             ] \n         } \n     }  }",
            "title": "Configuration"
        },
        {
            "location": "/getting_started/#components",
            "text": "Components are self contained specialized html elements, for example  <lbs-hero> . We are using  knockout components  behind the scenes to create the components, but in essens it is very inspired of the emerging webstandard of web components. Several components are  included  but you have also the ability to  build your own components  or download community components from the  AppStore  See all our components  here",
            "title": "Components"
        },
        {
            "location": "/getting_started/#custom-components-and-apps",
            "text": "Lime Bootstraps allows you to create and custom components, as a compliment to the included components. Lime Bootstrap 1 had the concept of creating small apps. These apps still run fine in Lime Bootstrap 2.0, but it is prefered to use components.  Components and Apps can be found  here  A Custom Component is added in  _config.js  and can then be used in the same way as any included component.  To start an app add this HTML to your view:  < div   data-app = \"{app:'[Name of app]',                  config:{                    [App config]              }}\" >  </ div >   Each app has it's own instructions how to start and install them. Some apps require VBA and/or stored procedures to be added.",
            "title": "Custom Components and Apps"
        },
        {
            "location": "/getting_started/#translation",
            "text": "All available translations from the Localization table are automatically available in the actionpad context. The same language as the logged in user uses is automatically used. The translations are cached in a dictionary to increase speed, but requires you to run  ThisApplication.Setup  to rebuild the dictionary if you add translations or make changes.  < li   data-bind = \"text:localize.ActionPad_Todo.addTodo\" ></ li >   The example below uses the versatile knockout binding  attr  to add a tooltip with localization support. It also uses the custom Lime Bootstrap bindings  vba  and  icon .  < li   data-bind = \"vba:'Actionpad_Person.newComment', text:localize.Actionpad_Person.t_newcomment, icon:'fa-comment', attr: { title: localize.Actionpad_Person.tooltip_newcomment }\" ></ li >",
            "title": "Translation"
        },
        {
            "location": "/getting_started/#technical-notes",
            "text": "The translations are added to the global view model and are thus available in your apps.  Note that it is not possible to use localization in the standard way, e.g.,  localize.Actionpad_Person.t_newcomment  within a block where you are using the knockout binding  with .",
            "title": "Technical notes"
        },
        {
            "location": "/getting_started/#fetching-data-from-fields-in-lime-crm",
            "text": "All fields from the ActiveInspector are automagically available for you to use in your view. The syntax is  [Record class name].[field database name].[property] .  The available properties are (in order of relevance):     .text      .value \n*    .key   -  available for set and list fields_\n*    .class__ -  available for relation fields  <!-- Company Actionpad showing the name of the company-->  < li   data-bind = \"text:company.name.text\" ></ li >  <!-- Shorthand--> < li > {{company.name.text}} </ li >  <!-- Person Actionpad using the id of the company relation as a parameter to a VBA-function. Note the Javascript syntax in the Knockout bindning  -->  < li   data-bind = \"vba:'SomeFunction,' + person.company.value\" ></ li >  <!-- Business Actionpad showing the optionKey from a set-list -->  < li   data-bind = \"text:business.businesstatus.key\" ></ li >",
            "title": "Fetching data from fields in Lime CRM"
        },
        {
            "location": "/getting_started/#loading-additional-data",
            "text": "It is common to use data from more than the ActiveInspector and the following syntax will NOT work  <li data-bind=\"text:person.company.phone.text\"></li>  Instead you can load additional data by requesting data sources in  _config.js .  The loaded data can then be access by:  All avialable data sources can be found  here  <!-- Loading person and company info on a helpdesk actionpad-->  < li   data-bind = \"text:helpdesk.company.text\" ></ li >  < li   data-bind = \"text:person.phone.text\" ></ li >  < li   data-bind = \"text:person.mobilephone.text\" ></ li >  < li   data-bind = \"text:company.phone.text\" ></ li >",
            "title": "Loading additional data"
        },
        {
            "location": "/getting_started/#keyboard-shortcuts",
            "text": "The different view can be opened with shortcuts provided the actionpad is in focus.     Function  Command      Reload actionpad  ctrl + shift + r",
            "title": "Keyboard shortcuts"
        },
        {
            "location": "/included_components/",
            "text": "LBS Components\n\n\nThe old style way of styling elements using a mix of LBS-specific and Twitter Bootstrap classes in actionpads and apps are being replaced by components. By using these new components as custom elements in your markup, all classes and intended styling will be included.\n\n\nPlease see the component tab for all availabe components\n\n\nImportant\n\n\n You can't use self closing elements when using custom elements such as the LBS components.\n\n The old way of styling your elements can still be used, but should be considered deprecated.\n* You can use data-binds combined with custom elements, but not any data-binds that would change the DOM in any way. Examples that do not work: \nicon\n, \ntext\n. Examples that do work: \nvba\n, \nclick\n, \nvisible\n. Visible is not obvious, because it seemingly changes the DOM, but only changes the styling of the element.",
            "title": "Included components"
        },
        {
            "location": "/included_components/#lbs-components",
            "text": "The old style way of styling elements using a mix of LBS-specific and Twitter Bootstrap classes in actionpads and apps are being replaced by components. By using these new components as custom elements in your markup, all classes and intended styling will be included.  Please see the component tab for all availabe components  Important   You can't use self closing elements when using custom elements such as the LBS components.  The old way of styling your elements can still be used, but should be considered deprecated.\n* You can use data-binds combined with custom elements, but not any data-binds that would change the DOM in any way. Examples that do not work:  icon ,  text . Examples that do work:  vba ,  click ,  visible . Visible is not obvious, because it seemingly changes the DOM, but only changes the styling of the element.",
            "title": "LBS Components"
        },
        {
            "location": "/bindings_and_filters/",
            "text": "Bindings and Filters\n\n\nBindings\n\n\nAs we relay heavily on knockout their \ndata-bind=\"\"\n syntax is used through out the framework. The \ndata-bind=\"\"\n syntax is a used as a property on an html element. In a \ndata-bind\n you add \nbindings\n, actions or triggers, to perform actions. All Knockout bindings are available, but also a few custom bindings to make your life easier.\nRead more about bindings and Knockout \nhere\n and try the tutorial \nhere\n\n\nA basic example of use of a knockout binding:\n\n\n<\nli\n \ndata-bind\n=\n\"text:company.name\"\n></\nli\n>\n\n\n\n\n\n\nYou can also use a short hand for bindnings, using brackets. The above example can also be written as\n\n\n<\nli\n>\n{{company.name}}\n</\nli\n>\n\n\n\n\n\n\nYou can read more about this short hand syntax \nhere\n\n\nAs default you only have access to the data of the ActiveInspector!\n\n\nKnockout bindings\n\n\nKnockout supplies a large set of bindings, which all can be found \nhere\n\n\nSome of the more common and useful bindings\n\n\n\n\nvisible:\n - \nhides or shows a html element based on an boolean expression\n\n\ntext:\n - \nDisplays a variable as text\n\n\nhtml:\n - \nPrepends the supplied font awesome icon to the html element\n\n\ncss:\n - \nAdd or remove CSS classes\n\n\nstyle:\n - \nAdd styling attributes\n\n\nattr\n - \nSet value of any html attribute\n\n\nforeach:\n - \nLoop through an array\n\n\n\n\nvbaVisible\n\n\nHiding or showing elements.\n\n\nIt is common that some elements only should be visible for certain users or when specific conditions apply. It can be done in two different ways. Either use the Lime Bootstrap data-binding \nvbaVisible:\n or use the knockout binding \nvisible:\n.\n\n\nThe \nvbaVisible:\n is used as follows. A VBA function is called, handling the logic whether the element should be visible or not, returning a boolean.\n\ntrue:\n Element is visible\n\nfalse:\n Element hidden\n\n\nIn complex cases the VBA-function can take input parameters to reduce the number of VBA functions required.\n\n\n<\nli\n \ndata-bind\n=\n\"vbaVisible:'ActionPad_Helpdesk.HideLinks, take'\"\n></\nli\n>\n\n\n\n\n\n\nYou can also use knockout's built in handler \nvisible:\n to hide or show elements. Any valid Javascript will be evaluated. Example:\n\n\n<!-- Shows an bootstrap alert if the todo is late. Moment.js is used to parse and handle dates.-->\n\n\n<\ndiv\n \nclass\n=\n\"alert alert-error\"\n \ndata-bind\n=\n\"\n\n\n   visible: todo.endtime.value !== null && (moment(todo.endtime.value) < moment() && todo.done.value != 1),\n\n\n   text: 'The task is ' + (todo.endtime.value != null ? moment(todo.endtime.value).fromNow(true) : '' )+ ' late!',\n\n\n   icon:'fa-bell'\"\n \n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\nThe binding \nvbaVisible\n is only able to execute a given VBA function that returns true or false. If you need to add some kind of code on top of that VBA function, use the original knockout binding \nvisible:\n instead. This example uses the opposite of the function result, but any other javascript code would also work fine.\n\n\n<\ndiv\n \ndata-bind\n=\n\"visible:!lbs.common.executeVba('App_MoveDate.moveDaysPossible')\"\n>\n\n...\n\n</\ndiv\n>\n\n\n\n\n\n\nvba\n\n\nExecuting VBA-functions and specific actions\n\n\nvba\n is used to trigger VBA-functions and specific actions on click. To call a VBA function simply use:\n\n\n<\nli\n \ndata-bind\n=\n\"vba:'ActionPad_Helpdesk.Take'\"\n></\nli\n>\n\n\n\n\n\n\nInput parameters are provided by simply separating them by commas.\n\n\n<\nli\n \ndata-bind\n=\n\"vba:'ActionPad_Helpdesk.Park, 1, t_park_1_hour'\"\n></\nli\n>\n\n\n\n\n\n\nYou can also use any available data in the actionpad as an input to the function through concatenating a string\n\n\n<\nli\n \ndata-bind\n=\n\"vba:'ActionPad_Helpdesk.DoSomethingWithTheRecord,' + helpdesk.idhelpdesk.value\"\n></\nli\n>\n\n\n\n\n\n\nshowOnMap\n\n\nShowing an address on a map\n\n\nSearches Google Maps for the provided address.\n\n\n<\nli\n \ndata-bind\n=\n\"text:company.postalcity.text, showOnMap: company.fullpostaladdress.text, icon: 'fa-map-marker'\"\n></\nli\n>\n\n\n\n\n\n\nCall\n\n\nCall a phone number\n\n\nAds an tel: link to the HTML wich triggers an built in softphone software.\n\n\n<\nli\n \ndata-bind\n=\n\"text: company.phone.text, call: company.phone.text, icon: 'fa-phone'\"\n></\nli\n>\n\n\n\n\n\n\nopenURL\n\n\nGo to a website\n\n\nOpens the suplied URL in an external browser\n\n\n<\nli\n \ndata-bind\n=\n\"text:company.www.text, openURL: company.www.text, icon: 'fa-globe'\"\n></\nli\n>\n\n\n\n\n\n\nlimeLink\n\n\nGo to another Lime Record\n\n\nTries to create an Lime link to the object provided, please note that the root node of the object is used and not a specific property.\n\n\n<\nli\n \ndata-bind\n=\n\"text:todo.company.text, limeLink:todo.company, icon:'fa-flag'\"\n></\nli\n>\n\n\n\n\n\n\nemail\n\n\nSend an email\n\n\nCreates an email. TODO: Should use Lime's built in email factory.\n\n\n<\nli\n \ndata-bind\n=\n\"text:person.email.text, email:person.email.text, icon:'fa-envelope'\"\n></\nli\n>\n\n\n\n\n\n\nappInvoke\n\n\nStart an app\n\n\n\n\nappInvoke\n\n\n\n\n<\nli\n \ndata-bind\n=\n\"appInvoke: 'textfileimport\"\n></\nli\n>\n\n\n\n\n\n\npopover\n\n\nShow additional info in a popover\n\n\nGives you a small overlayer of context that you can design as you like. In its simplest form, it can be used to display informative texts. It can also be initialized as an object with one or several adjustable attributes, allowing for styling both header icon and title. There are also a few pre-defined types with their own set designs.\n\n\n<\nli\n \ndata-bind\n=\n\"popover: 'This is a popover'\"\n></\nli\n>\n\n\n\n\n\n\nIf the popover is initialized as an object, the following attributes can be configured:\n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nicon\n\n\nAny of the icons available from Font Awesome.\n\n\n\n\n\n\n\n\ntext\n\n\nText you want to be displayed.\n\n\n\n\n\n\n\n\ntitle\n\n\nTitle to be displayed in the header section of the popover.\n\n\n\n\n\n\n\n\ncolor\n\n\nBackground color of the header section.\n\n\n\n\n\n\n\n\ntrigger\n\n\nWhat event will trigger the event, \nhover\n or \nclick\n\n\nhover\n\n\n\n\n\n\nplacement\n\n\ntop\n, \nright\n, \nbutton\n or \nleft\n\n\ntop\n\n\n\n\n\n\ntemplate\n\n\nsuccess\n \ninfo\n \nerror\n \nwarning\n or \ncustom\n\n\ncustom\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\nTemplate is a convenient way of getting the styling set up. The default value is 'custom'. The top four alternatives will override all values for 'color', 'title' and 'icon'. These will be replaced by template ones for the specific types.\n\n\n\n\nExample without template\n\n\n<\nli\n \ndata-bind\n=\n \n\"popover:{\n\n\n            text:'This is a popover',\n\n\n            title: 'LBS rules',\n\n\n            type: 'custom',\n\n\n            color:'magenta',\n\n\n            trigger: 'click',\n\n\n            icon: 'fa-check',\n\n\n            placement: 'top'\n\n\n        }, text: 'Popoverclick' \"\n>\n\n\n</\nli\n>\n\n\n\n\n\n\nExample with template\n\n\n<\nli\n \ndata-bind\n=\n\"popover:{text:'This is a popover.',type:'info'}\"\n></\nli\n>\n\n\n\n\n\n\ntooltip\n\n\nShow a helping tooltip\n\n\nGives you a good looking tooltip. \nBootstrap\n. You can design where you like the tooltip to show by sending a object with a placement.\n\n\n<\na\n \ndata-bind\n=\n\"text:'Andreas', tooltip: 'Konsult'\"\n></\na\n>\n\n\n<\na\n \ndata-bind\n=\n\"text:'Andreas', tooltip: {text:'Konsult',placement:'right'}\"\n></\na\n>\n\n\n\n\n\n\nFilters\n\n\nA filter in knockout is a way of 'piping' a text binding through a pre-defined filter to format the value in a desired way. The filter is initiated using the | sign followed by the name of the filter and any necessary parameter inputs to the filter.\n\n\nFilters are a smart and easy way to format your data in a binding\nA filter is a function transforming your binding data and outputting a formated version of it.\n\n\n<\nli\n \ndata-bind\n=\n\"text:deal.value | currency: SEK\"\n></\nli\n>\n\n\n<\nli\n>\n{{deal.value | currency: SEK}}\n</\nli\n>\n\n\n\n\n\n\nThis will produce a nicely formated value of a deal, example: \"10 000SEK\"\n\n\ndefault\n\n\nIf the value is blank, null, or an empty array, replace it with the given default value.\n\n\ndefault:<defaultValue>\n\n\n<\nli\n \ndata-bind\n=\n\"text:deal.name | default: 'Deal has no name\"\n></\nli\n>\n\n\n\n\n\n\nfit\n\n\nTrim the value if it\u2019s longer than the given length. The trimmed portion is replaced with ... or the replacement\n value, if given. By default, the value is trimmed on the right but can be changed to left or middle through the where option.\n\n\nfit:<length>[:<replacement>][:<where>]\n\n\n```html\n\n\n\nwill convert \"Shakespeare\" to \"Shak...are\".\n\n### json\nConvert the value to a JSON string using ko.toJSON. You can give a space value to format the JSON output.\n\n`json[:whitespace]`\n\n ```html\n\n<li\n \ndata-bind=\n\"text:person | json\"\n></li>\n\n\n\n\n\n\nlowercase\n\n\nConvert the value to lowercase.\n\n\n```html\n\n\n\nWill turn \"Kalle\" to \"kalle\"\n\n### number\nRounds a number of desired number of decimals\n\n`number:\n<numberOfDecimals>\n`\n\n ```html\n\n<li\n \ndata-bind=\n\"text:deal.value | number: 0\"\n></li>\n\n\n\n\n\n\nWill turn \"1000.00\" to \"1000\"\n\n\nreplace\n\n\nPerform a search and replace on the value using String#replace.\n\n\nreplace:<search>:<replace>\n\n\n```html\n\n\n\nWill turn \"A Big Deal\" into \"A Small Deal\"\n\n### uppercase\nConvert the value to uppercase.\n\n ```html\n\n<li\n \ndata-bind=\n\"text:person.name | uppercase\"\n></li>\n\n\n\n\n\n\ncurrency\n\n\nFormats a number with to a currency with a space a separate every \n number. Default 1000\n\n\nThe currency filter can be combined with a text data-bind to format a number as a currency. The filter takes two optional parameters - currency and divider. The currency is the unit in which you want to present the formatted number, e.g. $ or GBP or SEK. The divider lets you decide what delimiter to use for formatting the number.\n\n\ncurrency:<currencyName>:<divider>\n\n\n<\ndiv\n \ndata-bind\n=\n\"text: 100000 | currency:'$':','\"\n></\ndiv\n>\n\n\n\n\n\n\nThis filter will format the number 100000 as $100,000. The following code\n\n\n<\ndiv\n \ndata-bind\n=\n\"text: 100000 | currency:'SEK'\"\n></\ndiv\n>\n\n\n\n\n\n\nwill result in the formatted value 100 000 SEK.\n\n\npercent\n\n\nFormats a decimal number as percent 0,01 > 1%\n\n\n<\ndiv\n \ndata-bind\n=\n\"text: deal.probability | percent\"\n></\ndiv\n>\n\n\n\n\n\n\nfromNow\n\n\nFormats a date as a human readable text as for how long ago the date was.\n\n\n<\ndiv\n \ndata-bind\n=\n\"text: ticket.closed | percent\"\n></\ndiv\n>\n\n\n\n\n\n\nWill turn 2000-01-01 > \"Over ten years ago\"",
            "title": "Bindnings & filters"
        },
        {
            "location": "/bindings_and_filters/#bindings-and-filters",
            "text": "",
            "title": "Bindings and Filters"
        },
        {
            "location": "/bindings_and_filters/#bindings",
            "text": "As we relay heavily on knockout their  data-bind=\"\"  syntax is used through out the framework. The  data-bind=\"\"  syntax is a used as a property on an html element. In a  data-bind  you add  bindings , actions or triggers, to perform actions. All Knockout bindings are available, but also a few custom bindings to make your life easier.\nRead more about bindings and Knockout  here  and try the tutorial  here  A basic example of use of a knockout binding:  < li   data-bind = \"text:company.name\" ></ li >   You can also use a short hand for bindnings, using brackets. The above example can also be written as  < li > {{company.name}} </ li >   You can read more about this short hand syntax  here  As default you only have access to the data of the ActiveInspector!",
            "title": "Bindings"
        },
        {
            "location": "/bindings_and_filters/#knockout-bindings",
            "text": "Knockout supplies a large set of bindings, which all can be found  here  Some of the more common and useful bindings   visible:  -  hides or shows a html element based on an boolean expression  text:  -  Displays a variable as text  html:  -  Prepends the supplied font awesome icon to the html element  css:  -  Add or remove CSS classes  style:  -  Add styling attributes  attr  -  Set value of any html attribute  foreach:  -  Loop through an array",
            "title": "Knockout bindings"
        },
        {
            "location": "/bindings_and_filters/#vbavisible",
            "text": "Hiding or showing elements.  It is common that some elements only should be visible for certain users or when specific conditions apply. It can be done in two different ways. Either use the Lime Bootstrap data-binding  vbaVisible:  or use the knockout binding  visible: .  The  vbaVisible:  is used as follows. A VBA function is called, handling the logic whether the element should be visible or not, returning a boolean. true:  Element is visible false:  Element hidden  In complex cases the VBA-function can take input parameters to reduce the number of VBA functions required.  < li   data-bind = \"vbaVisible:'ActionPad_Helpdesk.HideLinks, take'\" ></ li >   You can also use knockout's built in handler  visible:  to hide or show elements. Any valid Javascript will be evaluated. Example:  <!-- Shows an bootstrap alert if the todo is late. Moment.js is used to parse and handle dates.-->  < div   class = \"alert alert-error\"   data-bind = \"     visible: todo.endtime.value !== null && (moment(todo.endtime.value) < moment() && todo.done.value != 1),     text: 'The task is ' + (todo.endtime.value != null ? moment(todo.endtime.value).fromNow(true) : '' )+ ' late!',     icon:'fa-bell'\"   >  </ div >   The binding  vbaVisible  is only able to execute a given VBA function that returns true or false. If you need to add some kind of code on top of that VBA function, use the original knockout binding  visible:  instead. This example uses the opposite of the function result, but any other javascript code would also work fine.  < div   data-bind = \"visible:!lbs.common.executeVba('App_MoveDate.moveDaysPossible')\" > \n... </ div >",
            "title": "vbaVisible"
        },
        {
            "location": "/bindings_and_filters/#vba",
            "text": "Executing VBA-functions and specific actions  vba  is used to trigger VBA-functions and specific actions on click. To call a VBA function simply use:  < li   data-bind = \"vba:'ActionPad_Helpdesk.Take'\" ></ li >   Input parameters are provided by simply separating them by commas.  < li   data-bind = \"vba:'ActionPad_Helpdesk.Park, 1, t_park_1_hour'\" ></ li >   You can also use any available data in the actionpad as an input to the function through concatenating a string  < li   data-bind = \"vba:'ActionPad_Helpdesk.DoSomethingWithTheRecord,' + helpdesk.idhelpdesk.value\" ></ li >",
            "title": "vba"
        },
        {
            "location": "/bindings_and_filters/#showonmap",
            "text": "Showing an address on a map  Searches Google Maps for the provided address.  < li   data-bind = \"text:company.postalcity.text, showOnMap: company.fullpostaladdress.text, icon: 'fa-map-marker'\" ></ li >",
            "title": "showOnMap"
        },
        {
            "location": "/bindings_and_filters/#call",
            "text": "Call a phone number  Ads an tel: link to the HTML wich triggers an built in softphone software.  < li   data-bind = \"text: company.phone.text, call: company.phone.text, icon: 'fa-phone'\" ></ li >",
            "title": "Call"
        },
        {
            "location": "/bindings_and_filters/#openurl",
            "text": "Go to a website  Opens the suplied URL in an external browser  < li   data-bind = \"text:company.www.text, openURL: company.www.text, icon: 'fa-globe'\" ></ li >",
            "title": "openURL"
        },
        {
            "location": "/bindings_and_filters/#limelink",
            "text": "Go to another Lime Record  Tries to create an Lime link to the object provided, please note that the root node of the object is used and not a specific property.  < li   data-bind = \"text:todo.company.text, limeLink:todo.company, icon:'fa-flag'\" ></ li >",
            "title": "limeLink"
        },
        {
            "location": "/bindings_and_filters/#email",
            "text": "Send an email  Creates an email. TODO: Should use Lime's built in email factory.  < li   data-bind = \"text:person.email.text, email:person.email.text, icon:'fa-envelope'\" ></ li >",
            "title": "email"
        },
        {
            "location": "/bindings_and_filters/#appinvoke",
            "text": "Start an app   appInvoke   < li   data-bind = \"appInvoke: 'textfileimport\" ></ li >",
            "title": "appInvoke"
        },
        {
            "location": "/bindings_and_filters/#popover",
            "text": "Show additional info in a popover  Gives you a small overlayer of context that you can design as you like. In its simplest form, it can be used to display informative texts. It can also be initialized as an object with one or several adjustable attributes, allowing for styling both header icon and title. There are also a few pre-defined types with their own set designs.  < li   data-bind = \"popover: 'This is a popover'\" ></ li >   If the popover is initialized as an object, the following attributes can be configured:     Param  Description  Default      icon  Any of the icons available from Font Awesome.     text  Text you want to be displayed.     title  Title to be displayed in the header section of the popover.     color  Background color of the header section.     trigger  What event will trigger the event,  hover  or  click  hover    placement  top ,  right ,  button  or  left  top    template  success   info   error   warning  or  custom  custom      Info  Template is a convenient way of getting the styling set up. The default value is 'custom'. The top four alternatives will override all values for 'color', 'title' and 'icon'. These will be replaced by template ones for the specific types.",
            "title": "popover"
        },
        {
            "location": "/bindings_and_filters/#example-without-template",
            "text": "< li   data-bind =   \"popover:{              text:'This is a popover',              title: 'LBS rules',              type: 'custom',              color:'magenta',              trigger: 'click',              icon: 'fa-check',              placement: 'top'          }, text: 'Popoverclick' \" >  </ li >",
            "title": "Example without template"
        },
        {
            "location": "/bindings_and_filters/#example-with-template",
            "text": "< li   data-bind = \"popover:{text:'This is a popover.',type:'info'}\" ></ li >",
            "title": "Example with template"
        },
        {
            "location": "/bindings_and_filters/#tooltip",
            "text": "Show a helping tooltip  Gives you a good looking tooltip.  Bootstrap . You can design where you like the tooltip to show by sending a object with a placement.  < a   data-bind = \"text:'Andreas', tooltip: 'Konsult'\" ></ a >  < a   data-bind = \"text:'Andreas', tooltip: {text:'Konsult',placement:'right'}\" ></ a >",
            "title": "tooltip"
        },
        {
            "location": "/bindings_and_filters/#filters",
            "text": "A filter in knockout is a way of 'piping' a text binding through a pre-defined filter to format the value in a desired way. The filter is initiated using the | sign followed by the name of the filter and any necessary parameter inputs to the filter.  Filters are a smart and easy way to format your data in a binding\nA filter is a function transforming your binding data and outputting a formated version of it.  < li   data-bind = \"text:deal.value | currency: SEK\" ></ li >  < li > {{deal.value | currency: SEK}} </ li >   This will produce a nicely formated value of a deal, example: \"10 000SEK\"",
            "title": "Filters"
        },
        {
            "location": "/bindings_and_filters/#default",
            "text": "If the value is blank, null, or an empty array, replace it with the given default value.  default:<defaultValue>  < li   data-bind = \"text:deal.name | default: 'Deal has no name\" ></ li >",
            "title": "default"
        },
        {
            "location": "/bindings_and_filters/#fit",
            "text": "Trim the value if it\u2019s longer than the given length. The trimmed portion is replaced with ... or the replacement\n value, if given. By default, the value is trimmed on the right but can be changed to left or middle through the where option.  fit:<length>[:<replacement>][:<where>]  ```html  will convert \"Shakespeare\" to \"Shak...are\".\n\n### json\nConvert the value to a JSON string using ko.toJSON. You can give a space value to format the JSON output.\n\n`json[:whitespace]`\n\n ```html <li   data-bind= \"text:person | json\" ></li>",
            "title": "fit"
        },
        {
            "location": "/bindings_and_filters/#lowercase",
            "text": "Convert the value to lowercase.  ```html  Will turn \"Kalle\" to \"kalle\"\n\n### number\nRounds a number of desired number of decimals\n\n`number: <numberOfDecimals> `\n\n ```html <li   data-bind= \"text:deal.value | number: 0\" ></li>   Will turn \"1000.00\" to \"1000\"",
            "title": "lowercase"
        },
        {
            "location": "/bindings_and_filters/#replace",
            "text": "Perform a search and replace on the value using String#replace.  replace:<search>:<replace>  ```html  Will turn \"A Big Deal\" into \"A Small Deal\"\n\n### uppercase\nConvert the value to uppercase.\n\n ```html <li   data-bind= \"text:person.name | uppercase\" ></li>",
            "title": "replace"
        },
        {
            "location": "/bindings_and_filters/#currency",
            "text": "Formats a number with to a currency with a space a separate every   number. Default 1000  The currency filter can be combined with a text data-bind to format a number as a currency. The filter takes two optional parameters - currency and divider. The currency is the unit in which you want to present the formatted number, e.g. $ or GBP or SEK. The divider lets you decide what delimiter to use for formatting the number.  currency:<currencyName>:<divider>  < div   data-bind = \"text: 100000 | currency:'$':','\" ></ div >   This filter will format the number 100000 as $100,000. The following code  < div   data-bind = \"text: 100000 | currency:'SEK'\" ></ div >   will result in the formatted value 100 000 SEK.",
            "title": "currency"
        },
        {
            "location": "/bindings_and_filters/#percent",
            "text": "Formats a decimal number as percent 0,01 > 1%  < div   data-bind = \"text: deal.probability | percent\" ></ div >",
            "title": "percent"
        },
        {
            "location": "/bindings_and_filters/#fromnow",
            "text": "Formats a date as a human readable text as for how long ago the date was.  < div   data-bind = \"text: ticket.closed | percent\" ></ div >   Will turn 2000-01-01 > \"Over ten years ago\"",
            "title": "fromNow"
        },
        {
            "location": "/datasources/",
            "text": "Data sources\n\n\nA core concept in Lime Bootstrap is data sources. A data source is just what it sounds like, a source of data. The source can be many things, like a Lime Inspector, a REST web-service, a stored procedure or a VBA function. Data sources are used both while working with basic views and especially when working with custom components.\n\n\nAll data sources  takes a paramter \ntype\n and then some other source specific params.\n\n\nAll source can also take a parameter \n\"alias\"\n, which lets you specify a name for the data source in ViewModel. This might be usefull if you have multiple sources on the same table wich may otherwise will cause naming collisions.\n\n\nA data source can either be specified in \n_config.js\n or programtically created via \nlbs.loader.createDataSource()\n and for legacy data sources \nlbs.loader.loadDataSource()\n. An array of data sources can also be sent to \nlbs.loader.loadDataSources()\n\n\n\n\nExample\n\n\nExample of loading a few data sources in \n_config.js\n\n\ndataSources\n:\n\n        \n[\n\n            \n{\ntype\n:\n \n'activeInspector'\n},\n\n            \n{\ntype\n:\n \n'localization'\n},\n\n            \n{\ntype\n:\n \n'relatedRecord'\n,\n \nsource\n:\n \n'person'\n,\n \nview\n:\n \n'name;phone'\n \n,\n \nalias\n:\n \n'contact'\n},\n\n            \n{\ntype\n:\n \n'storedProcedure'\n,\n \nsource\n:\n \n''\n}\n\n        \n]\n,\n\n\n\n\n\n\n\n\nData sources\n\n\nactiveLimeObject\n\n\nFetch data from the Lime CRM api for the currently active LimeObject\n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nType of the data source\n\n\n\n\ntrue\n\n\n\n\n\n\nembed\n\n\nRelated objects to embed\n\n\n[]\n\n\nfalse\n\n\n\n\n\n\nalias\n\n\nName of node in the ViewModel\n\n\nName of active Lime Object\n\n\nfalse\n\n\n\n\n\n\nprotocol\n\n\nProtocol of fetch\n\n\nhttps\n\n\nfalse\n\n\n\n\n\n\nEmbed fetches data from related objects. It only works for \nbelongs_to\n properties.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe returned data is almost identical to the answer from the Lime CRM API with one important exception, embedded objects. To make embedded data easier to use directly in a View we push the data from the \n_embeded\n-node to a \n[your object here]\n-node.\n\n\n\n\n{ type: 'activeLimeObject' , embed: ['coworker']}\n\n\n\n\n\nFor programtic use\n\n\nconst\n \ndataSource\n \n=\nlbs\n.\nloader\n.\ncreateDataSource\n({\n \ntype\n:\n \n'activeLimeObject'\n \n,\n \nembed\n:\n \n[\n'coworker'\n]})\n\n\nconst\n \ndata\n \n=\n \nawait\n \ndataSource\n.\nfetch\n()\n\n\n\n\n\n\nrelatedLimeObjects\n\n\nFetch data from the Lime CRM api for related objects to the currently active LimeObject\n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nType of the data source\n\n\n\n\ntrue\n\n\n\n\n\n\nalias\n\n\nName of node in the ViewModel\n\n\n\n\ntrue\n\n\n\n\n\n\nfetchAll\n\n\nFetches all related data instead of only first page\n\n\ntrue\n\n\nfalse\n\n\n\n\n\n\nsort\n\n\nProperty to sort result on\n\n\n\n\nfalse\n\n\n\n\n\n\nsortOrder\n\n\n'asc' or 'desc'\n\n\ndesc\n\n\nfalse\n\n\n\n\n\n\nembed\n\n\nRelated objects to embed\n\n\n[]\n\n\nfalse\n\n\n\n\n\n\nfilter\n\n\nA filter string\n\n\n[]\n\n\nfalse\n\n\n\n\n\n\nsize\n\n\nNumber of items in fetch\n\n\n0\n\n\nfalse\n\n\n\n\n\n\nprotocol\n\n\nProtocol of fetch\n\n\nhttps\n\n\nfalse\n\n\n\n\n\n\n\n\n{\n \ntype\n:\n \n'relatedLimeObjects'\n,\n \nlimetype\n:\n \n'person'\n,\n \nalias\n:\n \n'persons'\n,\n \nprotocol\n:\n \n'http'\n \n}\n\n\n\n\n\n\nFor programtic use\n\n\nconst\n \ndataSource\n \n=\nlbs\n.\nloader\n.\ncreateDataSource\n({\n \ntype\n:\n \n'relatedLimeObjects'\n,\n \nlimetype\n:\n \n'person'\n,\n \nalias\n:\n \n'persons'\n,\n \nprotocol\n:\n \n'http'\n \n})\n\n\nconst\n \ndata\n \n=\n \nawait\n \ndataSource\n.\nfetch\n()\n\n\n\n\n\n\ntranslations\n\n\nFetch translations for the specified language for a specific key (owner)\n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nType of the data source\n\n\n\n\ntrue\n\n\n\n\n\n\nalias\n\n\nName of node in the ViewModel\n\n\ntxt\n\n\nfalse\n\n\n\n\n\n\nlocale\n\n\nA string to specified the wanted locale\n\n\nUsers locale\n\n\nfalse\n\n\n\n\n\n\nowner\n\n\nOwner of the translation\n\n\nUsers locale\n\n\nfalse\n\n\n\n\n\n\nprotocol\n\n\nProtocol of fetch\n\n\nhttps\n\n\nfalse\n\n\n\n\n\n\n\n\n{\n \ntype\n:\n \n'translations'\n,\n \nowner\n:\n \n'company'\n}\n\n\n\n\n\n\nFor programtic use\n\n\nconst\n \ndataSource\n \n=\nlbs\n.\nloader\n.\ncreateDataSource\n({\n \ntype\n:\n \n'translations'\n,\n \nowner\n:\n \n'company'\n})\n\n\nconst\n \ndata\n \n=\n \nawait\n \ndataSource\n.\nfetch\n()\n\n\n\n\n\n\ncustomEndpoint\n\n\nCan GET, PUT, POST and DELETE to a Lime CRM Custom Endpoint\n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\nDefault\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nType of the data source\n\n\n\n\ntrue\n\n\n\n\n\n\nalias\n\n\nName of node in the ViewModel\n\n\n''\n\n\ntrue\n\n\n\n\n\n\nrelativeUrl\n\n\nA url to the custom endpoint, relative the base URL\n\n\n\n\ntrue\n\n\n\n\n\n\nprotocol\n\n\nProtocol of fetch\n\n\nhttps\n\n\nfalse\n\n\n\n\n\n\n\n\n{\n \ntype\n:\n \n'customEndpoint'\n,\n \nalias\n:\n \n'myData'\n,\n \nrelativeUrl\n:\n \n'my_endpoint/my_subfunc/'\n}\n\n\n\n\n\n\nFor programtic use\n\n\nconst\n \ndataSource\n \n=\nlbs\n.\nloader\n.\ncreateDataSource\n({\n \ntype\n:\n \n'customEndpoint'\n,\n \nalias\n:\n \n'myData'\n,\n \nrelativeUrl\n:\n \n'my_endpoint/my_subfunc/'\n})\n\n\n\n// GET and DELETE\n\n\nconst\n \ndata\n \n=\n \nawait\n \ndataSource\n.\nget\n()\n\n\nconst\n \ndata2\n \n=\n \nawait\n \ndataSource\n.\ndelete\n()\n\n\n\nconst\n \npayload\n \n=\n \n{\nprop\n:\n \n'value'\n}\n\n\n\n// PUT and POST\n\n\nconst\n \ndata3\n \n=\n \nawait\n \ndataSource\n.\npost\n(\npayload\n)\n\n\nconst\n \ndata4\n \n=\n \nawait\n \ndataSource\n.\nput\n(\npayload\n)\n\n\n\n\n\n\nLegacy data sources\n\n\nThe legacy datasources fetches data through the use of VBA or directly through the COM-bridge. These datasources are slower, blocking and less compatible with future directions. Avoyd using them or limit your use as much as possible\n\n\nactiveInspector\n\n\nFetch data from the ActiveInspector\n\n\nThe datasource takes no additional params.\n\n\nrecord\n\n\nExecute specified VBA-function which must return a Record object.\n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nName of VBA-function\n\n\n\n\n\n\n\n\nPassInspectorParam\n\n\nPass activeInspector id for lookups\n\n\nfalse\n\n\n\n\n\n\n\n\nrecords\n\n\nExecute specified VBA-function which must return a Records set object.\n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nName of VBA-function\n\n\n\n\n\n\n\n\nPassInspectorParam\n\n\nPass activeInspector id for lookups\n\n\nfalse\n\n\n\n\n\n\n\n\nrelatedRecord\n\n\nLoads additonal fields from a record connected to the active inspector.\n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nrelationfield on activeinspector\n\n\n\n\n\n\nview\n\n\nsemicolon separeted list of fields to fetch\n\n\n\n\n\n\n\n\nxml\n\n\nExecute specified VBA-function which must return a XML as string\n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nName of VBA-function\n\n\n\n\n\n\n\n\nPassInspectorParam\n\n\nPass activeInspector id for lookups\n\n\nfalse\n\n\n\n\n\n\n\n\nlocalization\n\n\nExecute specified VBA-function which must return a Records set object.\n\n\nThe datasource takes no additional params.\n\n\nstoredProcedure\n\n\nExecute specified stored procedure. The procedure must return xml.\n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nName of stored procedure\n\n\n\n\n\n\n\n\nHTTPGetXml\n\n\nCalls a web-service and expects a xml response.\n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nURL\n\n\n\n\n\n\n\n\nSOAPGetXml\n\n\nCalls a SOAP web-service.\n\n\n\n\n\n\n\n\nParam\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nURL\n\n\n\n\n\n\naction\n\n\nSOAP action\n\n\n\n\n\n\nxml\n\n\nSOAP request",
            "title": "Data sources"
        },
        {
            "location": "/datasources/#data-sources",
            "text": "A core concept in Lime Bootstrap is data sources. A data source is just what it sounds like, a source of data. The source can be many things, like a Lime Inspector, a REST web-service, a stored procedure or a VBA function. Data sources are used both while working with basic views and especially when working with custom components.  All data sources  takes a paramter  type  and then some other source specific params.  All source can also take a parameter  \"alias\" , which lets you specify a name for the data source in ViewModel. This might be usefull if you have multiple sources on the same table wich may otherwise will cause naming collisions.  A data source can either be specified in  _config.js  or programtically created via  lbs.loader.createDataSource()  and for legacy data sources  lbs.loader.loadDataSource() . An array of data sources can also be sent to  lbs.loader.loadDataSources()   Example  Example of loading a few data sources in  _config.js  dataSources : \n         [ \n             { type :   'activeInspector' }, \n             { type :   'localization' }, \n             { type :   'relatedRecord' ,   source :   'person' ,   view :   'name;phone'   ,   alias :   'contact' }, \n             { type :   'storedProcedure' ,   source :   '' } \n         ] ,",
            "title": "Data sources"
        },
        {
            "location": "/datasources/#data-sources_1",
            "text": "",
            "title": "Data sources"
        },
        {
            "location": "/datasources/#activelimeobject",
            "text": "Fetch data from the Lime CRM api for the currently active LimeObject     Param  Description  Default  Required      type  Type of the data source   true    embed  Related objects to embed  []  false    alias  Name of node in the ViewModel  Name of active Lime Object  false    protocol  Protocol of fetch  https  false    Embed fetches data from related objects. It only works for  belongs_to  properties.         Note  The returned data is almost identical to the answer from the Lime CRM API with one important exception, embedded objects. To make embedded data easier to use directly in a View we push the data from the  _embeded -node to a  [your object here] -node.   { type: 'activeLimeObject' , embed: ['coworker']}  For programtic use  const   dataSource   = lbs . loader . createDataSource ({   type :   'activeLimeObject'   ,   embed :   [ 'coworker' ]})  const   data   =   await   dataSource . fetch ()",
            "title": "activeLimeObject"
        },
        {
            "location": "/datasources/#relatedlimeobjects",
            "text": "Fetch data from the Lime CRM api for related objects to the currently active LimeObject     Param  Description  Default  Required      type  Type of the data source   true    alias  Name of node in the ViewModel   true    fetchAll  Fetches all related data instead of only first page  true  false    sort  Property to sort result on   false    sortOrder  'asc' or 'desc'  desc  false    embed  Related objects to embed  []  false    filter  A filter string  []  false    size  Number of items in fetch  0  false    protocol  Protocol of fetch  https  false     {   type :   'relatedLimeObjects' ,   limetype :   'person' ,   alias :   'persons' ,   protocol :   'http'   }   For programtic use  const   dataSource   = lbs . loader . createDataSource ({   type :   'relatedLimeObjects' ,   limetype :   'person' ,   alias :   'persons' ,   protocol :   'http'   })  const   data   =   await   dataSource . fetch ()",
            "title": "relatedLimeObjects"
        },
        {
            "location": "/datasources/#translations",
            "text": "Fetch translations for the specified language for a specific key (owner)     Param  Description  Default  Required      type  Type of the data source   true    alias  Name of node in the ViewModel  txt  false    locale  A string to specified the wanted locale  Users locale  false    owner  Owner of the translation  Users locale  false    protocol  Protocol of fetch  https  false     {   type :   'translations' ,   owner :   'company' }   For programtic use  const   dataSource   = lbs . loader . createDataSource ({   type :   'translations' ,   owner :   'company' })  const   data   =   await   dataSource . fetch ()",
            "title": "translations"
        },
        {
            "location": "/datasources/#customendpoint",
            "text": "Can GET, PUT, POST and DELETE to a Lime CRM Custom Endpoint     Param  Description  Default  Required      type  Type of the data source   true    alias  Name of node in the ViewModel  ''  true    relativeUrl  A url to the custom endpoint, relative the base URL   true    protocol  Protocol of fetch  https  false     {   type :   'customEndpoint' ,   alias :   'myData' ,   relativeUrl :   'my_endpoint/my_subfunc/' }   For programtic use  const   dataSource   = lbs . loader . createDataSource ({   type :   'customEndpoint' ,   alias :   'myData' ,   relativeUrl :   'my_endpoint/my_subfunc/' })  // GET and DELETE  const   data   =   await   dataSource . get ()  const   data2   =   await   dataSource . delete ()  const   payload   =   { prop :   'value' }  // PUT and POST  const   data3   =   await   dataSource . post ( payload )  const   data4   =   await   dataSource . put ( payload )",
            "title": "customEndpoint"
        },
        {
            "location": "/datasources/#legacy-data-sources",
            "text": "The legacy datasources fetches data through the use of VBA or directly through the COM-bridge. These datasources are slower, blocking and less compatible with future directions. Avoyd using them or limit your use as much as possible",
            "title": "Legacy data sources"
        },
        {
            "location": "/datasources/#activeinspector",
            "text": "Fetch data from the ActiveInspector  The datasource takes no additional params.",
            "title": "activeInspector"
        },
        {
            "location": "/datasources/#record",
            "text": "Execute specified VBA-function which must return a Record object.     Param  Description  Default      source  Name of VBA-function     PassInspectorParam  Pass activeInspector id for lookups  false",
            "title": "record"
        },
        {
            "location": "/datasources/#records",
            "text": "Execute specified VBA-function which must return a Records set object.     Param  Description  Default      source  Name of VBA-function     PassInspectorParam  Pass activeInspector id for lookups  false",
            "title": "records"
        },
        {
            "location": "/datasources/#relatedrecord",
            "text": "Loads additonal fields from a record connected to the active inspector.     Param  Description      source  relationfield on activeinspector    view  semicolon separeted list of fields to fetch",
            "title": "relatedRecord"
        },
        {
            "location": "/datasources/#xml",
            "text": "Execute specified VBA-function which must return a XML as string     Param  Description  Default      source  Name of VBA-function     PassInspectorParam  Pass activeInspector id for lookups  false",
            "title": "xml"
        },
        {
            "location": "/datasources/#localization",
            "text": "Execute specified VBA-function which must return a Records set object.  The datasource takes no additional params.",
            "title": "localization"
        },
        {
            "location": "/datasources/#storedprocedure",
            "text": "Execute specified stored procedure. The procedure must return xml.     Param  Description      source  Name of stored procedure",
            "title": "storedProcedure"
        },
        {
            "location": "/datasources/#httpgetxml",
            "text": "Calls a web-service and expects a xml response.     Param  Description      source  URL",
            "title": "HTTPGetXml"
        },
        {
            "location": "/datasources/#soapgetxml",
            "text": "Calls a SOAP web-service.     Param  Description      source  URL    action  SOAP action    xml  SOAP request",
            "title": "SOAPGetXml"
        },
        {
            "location": "/custom_components/",
            "text": "Building apps\n\n\nBasics\n\n\nApps are small standalone tools, used for customer customisations. They are loaded dynamically and added only through a single line of HTML in the Actionpad. The business logic and dataconnection is allways performed by the VBA. This functionallity should be inside a single module.\n\n\nThe general idea of an app is to implement:\n\n\n\n\nA function or procedure to deliver data. VBA or SQL, can deliver data as xml, record or records.\n\n\nA view - An html template with the structure of your app.\n\n\nA view-model - the viewmodel holds a rednering and frontend logic\n\n\n\n\nAn app is initilaized as:\n1. The app is loaded and the config of the app is parsed\n2. Data is loaded from Lime CRM, from your supplied function\n3. The data is converted to a view-model (In this case the view model is just a JSON represenation of the data)\n4. Additional resources are loaded to the app\n5. The view-model is supplied to the app and cam be modified\n6. The app view is loaded from app.html.\n7. The view and view-model is rendered and injected to the actionpad\n\n\nInitiation of an app is executed by the \nlbs.apploader.js\n module and triggered by an \ndata-app:\n-attribute.\n\n\nThe data can be provided as XML, record or records and limebootstrap will then supply the app with an View-model based on the data, free for you to work with. In the view model you will also find all translations and avilable data from the current actionpad viewmodel.\n\n\n<\ndiv\n \ndata-app\n=\n\"{app:'checklist',config:{canBeUnchecked:true,allowRemove:true, canAddTask:true}} \"\n \n></\ndiv\n>\n\n\n\n\n\n\nPlease note that you can not have a \ndata-app\n and \ndata-bind\n attribute in the same element\n\n\nThe javascript app structure\n\n\nlbs\n.\napploader\n.\nregister\n(\n'template'\n,\n \nfunction\n \n()\n \n{\n \n//Insert name of app here\n\n    \nvar\n \nself\n \n=\n \nthis\n;\n\n\n    \n//config\n\n    \nthis\n.\nconfig\n \n=\n \n{\n\n        \ndataSources\n:\n \n[\n \n//Either provide your data source here, or let the user of your app supplie it\n\n\n        \n],\n\n        \nresources\n:\n \n{\n \n//Add any extra resources that should be loadad. The paths are realtive your app folder, exept libs which are loaded from system/js/\n\n            \nscripts\n:\n \n[],\n\n            \nstyles\n:\n \n[\n'app.css'\n],\n\n            \nlibs\n:\n \n[\n'json2xml.js'\n]\n\n        \n}\n\n    \n},\n\n\n    \n//initialize\n\n    \nthis\n.\ninitialize\n \n=\n \nfunction\n \n(\nnode\n,\n \nviewModel\n)\n \n{\n\n\n        \n//Use this method to setup you app.\n\n        \n//\n\n        \n//The data you requested along with activeInspector are delivered in the variable viewModel.\n\n        \n//You may make any modifications you please to it or replace is with a entirely new one before returning it.\n\n        \n//The returned viewmodel will be used to build your app.\n\n\n\n        \nreturn\n \nviewModel\n;\n\n    \n}\n\n\n\n\n\n\nObject definitions\n\n\nDataSouce\n\n\n{type: '', source: '', alias:''}\n\n\nLimeVersion\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nComment\n\n\n\n\n\n\n\n\n\n\ncomparable\n\n\nint\n\n\n\n\n\n\n\n\nfull\n\n\nstring\n\n\n\n\n\n\n\n\nmajor\n\n\nint\n\n\n\n\n\n\n\n\nminor\n\n\nint\n\n\n\n\n\n\n\n\nbuild\n\n\nint\n\n\n\n\n\n\n\n\n\n\nLibrary attributes\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nlbs.debug\n\n\nint\n\n\nif debug modes has been triggered\n\n\n\n\n\n\nlbs.limeVersion\n\n\nLimeVersion\n\n\n\n\n\n\n\n\nlbs.limeDataConnection\n\n\nobject\n\n\nreference to window.external\n\n\n\n\n\n\nlbs.hasLimeConnection\n\n\nboolean\n\n\nhas reference to lime?\n\n\n\n\n\n\nlbs.activeClass\n\n\nstring\n\n\n\n\n\n\n\n\nlbs.activeDatabase\n\n\nstring\n\n\n\n\n\n\n\n\nlbs.activeServer\n\n\nstring\n\n\n\n\n\n\n\n\nlbs.common.iconTemplate\n\n\nstring\n\n\ntemplate for icon html\n\n\n\n\n\n\n\n\nLibrary helper functions\n\n\nlbs.heper.loadDataSorces()\n\n\nLoads multiple datasources into a JSON objekt\n\n\nSyntax\n\n\nlbs.heper.loadDataSorces(viewModel, DataSources, [override])\n\n\nParameters\n\n\n\n\n\n\n\n\nParameters\n\n\nType\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nviewModel\n\n\narray\n\n\nobject to assign values to\n\n\n\n\n\n\nDataSources\n\n\nArray\n\n\nsources\n\n\n\n\n\n\nOverride\n\n\nboolean\n\n\nif duplicate values should be overriden or thrown away\n\n\n\n\n\n\n\n\nlbs.heper.loadDataSorce()\n\n\nLoads a datasources into a JSON objekt\n\n\nSyntax\n\n\nlbs.heper.loadDataSorce(viewModel, DataSource, [override])\n\n\nParameters\n\n\n\n\n\n\n\n\nParameters\n\n\nType\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nviewModel\n\n\narray\n\n\nobject to assign values to\n\n\n\n\n\n\nDataSource\n\n\nDataSouce\n\n\nsource\n\n\n\n\n\n\nOverride\n\n\nboolean\n\n\nif duplicate values should be overriden or thrown away\n\n\n\n\n\n\n\n\nlbs.common.getErrorText()\n\n\nReturnes a funny error adjective :)\n\n\nSyntax\n\n\nlbs.common.getErrorText()\n\n\nReturn\n\n\nstring\n\n\nlbs.common.escapeHtml()\n\n\nEscape html\n\n\nSyntax\n\n\nlbs.common.escapeHtml(html)\n\n\nParameters\n\n\n\n\n\n\n\n\nParameters\n\n\nType\n\n\n\n\n\n\n\n\n\n\nhtml\n\n\nstring\n\n\n\n\n\n\n###### Return\n\n\n\n\n\n\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nlbs.common.createLimeLink()\n\n\nCreate limelink\n\n\nSyntax\n\n\nlbs.common.createLimeLink(class,id)\n\n\nParameters\n\n\n\n\n\n\n\n\nParameters\n\n\nType\n\n\n\n\n\n\n\n\n\n\nclass\n\n\nstring\n\n\n\n\n\n\nid\n\n\nint\n\n\n\n\n\n\n###### Return\n\n\n\n\n\n\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nlbs.common.getURLParameter()\n\n\nExtract URL parameter from GET variable\n\n\nSyntax\n\n\nlbs.common.getURLParameter(name)\n\n\nParameters\n\n\n\n\n\n\n\n\nParameters\n\n\nType\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\n\n\n\n\n###### Return\n\n\n\n\n\n\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nlbs.common.executeVba()\n\n\nExecute VBA code, same as old VBA.run()\n\n\nSyntax\n\n\nlbs.common.executeVba(proc,params)\n\n\nParameters\n\n\n\n\n\n\n\n\nParameters\n\n\nType\n\n\n\n\n\n\n\n\n\n\nproc\n\n\nstring\n\n\n\n\n\n\nparams\n\n\nstring\n\n\n\n\n\n\n###### Return\n\n\n\n\n\n\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nlbs.common.nl2br\n\n\nreplace nl chars with html rowbreaks\n\n\nSyntax\n\n\nlbs.common.nl2br(data)\n\n\nParameters\n\n\n\n\n\n\n\n\nParameters\n\n\nType\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nstring\n\n\n\n\n\n\n##### Return\n\n\n\n\n\n\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nstring.format()\n\n\nImplementation of c# String.Format()\n\n\nSyntax\n\n\nstring.format(format,var1,[var2])\n\n\nParameters\n\n\n\n\n\n\n\n\nParameters\n\n\nType\n\n\n\n\n\n\n\n\n\n\nformat\n\n\nstring\n\n\n\n\n\n\nvar\n\n\nreplacement varibles\n\n\n\n\n\n\n##### Return\n\n\n\n\n\n\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nlbs.log.debug\n\n\nLog message at debug level\n\n\nSyntax\n\n\nlbs.log.debug(msg)\n\n\nParameters\n\n\n\n\n\n\n\n\nParameters\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nmessage\n\n\n\n\n\n\n\n\nlbs.log.debug\n\n\nLog message at info level\n\n\nSyntax\n\n\nlbs.log.info(msg)\n\n\nParameters\n\n\n\n\n\n\n\n\nParameters\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nmessage\n\n\n\n\n\n\n\n\nlbs.log.warn\n\n\nLog message at warn level\n\n\nSyntax\n\n\nlbs.log.warn(msg, [e])\n\n\nParameters\n\n\n\n\n\n\n\n\nParameters\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nmessage\n\n\n\n\n\n\ne\n\n\nExecption (optional)\n\n\n\n\n\n\n\n\nlbs.log.error\n\n\nLog message at error level\n\n\nSyntax\n\n\nlbs.log.error(msg, [e])\n\n\nParameters\n\n\n|Parameters|Type|\n|---|---|---|\n|msg|message|\n|e|Execption (optional)|",
            "title": "Custom components"
        },
        {
            "location": "/custom_components/#building-apps",
            "text": "",
            "title": "Building apps"
        },
        {
            "location": "/custom_components/#basics",
            "text": "Apps are small standalone tools, used for customer customisations. They are loaded dynamically and added only through a single line of HTML in the Actionpad. The business logic and dataconnection is allways performed by the VBA. This functionallity should be inside a single module.  The general idea of an app is to implement:   A function or procedure to deliver data. VBA or SQL, can deliver data as xml, record or records.  A view - An html template with the structure of your app.  A view-model - the viewmodel holds a rednering and frontend logic   An app is initilaized as:\n1. The app is loaded and the config of the app is parsed\n2. Data is loaded from Lime CRM, from your supplied function\n3. The data is converted to a view-model (In this case the view model is just a JSON represenation of the data)\n4. Additional resources are loaded to the app\n5. The view-model is supplied to the app and cam be modified\n6. The app view is loaded from app.html.\n7. The view and view-model is rendered and injected to the actionpad  Initiation of an app is executed by the  lbs.apploader.js  module and triggered by an  data-app: -attribute.  The data can be provided as XML, record or records and limebootstrap will then supply the app with an View-model based on the data, free for you to work with. In the view model you will also find all translations and avilable data from the current actionpad viewmodel.  < div   data-app = \"{app:'checklist',config:{canBeUnchecked:true,allowRemove:true, canAddTask:true}} \"   ></ div >   Please note that you can not have a  data-app  and  data-bind  attribute in the same element",
            "title": "Basics"
        },
        {
            "location": "/custom_components/#the-javascript-app-structure",
            "text": "lbs . apploader . register ( 'template' ,   function   ()   {   //Insert name of app here \n     var   self   =   this ; \n\n     //config \n     this . config   =   { \n         dataSources :   [   //Either provide your data source here, or let the user of your app supplie it \n\n         ], \n         resources :   {   //Add any extra resources that should be loadad. The paths are realtive your app folder, exept libs which are loaded from system/js/ \n             scripts :   [], \n             styles :   [ 'app.css' ], \n             libs :   [ 'json2xml.js' ] \n         } \n     }, \n\n     //initialize \n     this . initialize   =   function   ( node ,   viewModel )   { \n\n         //Use this method to setup you app. \n         // \n         //The data you requested along with activeInspector are delivered in the variable viewModel. \n         //You may make any modifications you please to it or replace is with a entirely new one before returning it. \n         //The returned viewmodel will be used to build your app. \n\n\n         return   viewModel ; \n     }",
            "title": "The javascript app structure"
        },
        {
            "location": "/custom_components/#object-definitions",
            "text": "",
            "title": "Object definitions"
        },
        {
            "location": "/custom_components/#datasouce",
            "text": "{type: '', source: '', alias:''}",
            "title": "DataSouce"
        },
        {
            "location": "/custom_components/#limeversion",
            "text": "Parameter  Type  Comment      comparable  int     full  string     major  int     minor  int     build  int",
            "title": "LimeVersion"
        },
        {
            "location": "/custom_components/#library-attributes",
            "text": "Parameter  Type  Comment      lbs.debug  int  if debug modes has been triggered    lbs.limeVersion  LimeVersion     lbs.limeDataConnection  object  reference to window.external    lbs.hasLimeConnection  boolean  has reference to lime?    lbs.activeClass  string     lbs.activeDatabase  string     lbs.activeServer  string     lbs.common.iconTemplate  string  template for icon html",
            "title": "Library attributes"
        },
        {
            "location": "/custom_components/#library-helper-functions",
            "text": "",
            "title": "Library helper functions"
        },
        {
            "location": "/custom_components/#lbsheperloaddatasorces",
            "text": "Loads multiple datasources into a JSON objekt",
            "title": "lbs.heper.loadDataSorces()"
        },
        {
            "location": "/custom_components/#syntax",
            "text": "lbs.heper.loadDataSorces(viewModel, DataSources, [override])",
            "title": "Syntax"
        },
        {
            "location": "/custom_components/#parameters",
            "text": "Parameters  Type  Comment      viewModel  array  object to assign values to    DataSources  Array  sources    Override  boolean  if duplicate values should be overriden or thrown away",
            "title": "Parameters"
        },
        {
            "location": "/custom_components/#lbsheperloaddatasorce",
            "text": "Loads a datasources into a JSON objekt",
            "title": "lbs.heper.loadDataSorce()"
        },
        {
            "location": "/custom_components/#syntax_1",
            "text": "lbs.heper.loadDataSorce(viewModel, DataSource, [override])",
            "title": "Syntax"
        },
        {
            "location": "/custom_components/#parameters_1",
            "text": "Parameters  Type  Comment      viewModel  array  object to assign values to    DataSource  DataSouce  source    Override  boolean  if duplicate values should be overriden or thrown away",
            "title": "Parameters"
        },
        {
            "location": "/custom_components/#lbscommongeterrortext",
            "text": "Returnes a funny error adjective :)",
            "title": "lbs.common.getErrorText()"
        },
        {
            "location": "/custom_components/#syntax_2",
            "text": "lbs.common.getErrorText()",
            "title": "Syntax"
        },
        {
            "location": "/custom_components/#return",
            "text": "string",
            "title": "Return"
        },
        {
            "location": "/custom_components/#lbscommonescapehtml",
            "text": "Escape html",
            "title": "lbs.common.escapeHtml()"
        },
        {
            "location": "/custom_components/#syntax_3",
            "text": "lbs.common.escapeHtml(html)",
            "title": "Syntax"
        },
        {
            "location": "/custom_components/#parameters_2",
            "text": "Parameters  Type      html  string    ###### Return     string",
            "title": "Parameters"
        },
        {
            "location": "/custom_components/#lbscommoncreatelimelink",
            "text": "Create limelink",
            "title": "lbs.common.createLimeLink()"
        },
        {
            "location": "/custom_components/#syntax_4",
            "text": "lbs.common.createLimeLink(class,id)",
            "title": "Syntax"
        },
        {
            "location": "/custom_components/#parameters_3",
            "text": "Parameters  Type      class  string    id  int    ###### Return     string",
            "title": "Parameters"
        },
        {
            "location": "/custom_components/#lbscommongeturlparameter",
            "text": "Extract URL parameter from GET variable",
            "title": "lbs.common.getURLParameter()"
        },
        {
            "location": "/custom_components/#syntax_5",
            "text": "lbs.common.getURLParameter(name)",
            "title": "Syntax"
        },
        {
            "location": "/custom_components/#parameters_4",
            "text": "Parameters  Type      name  string    ###### Return     string",
            "title": "Parameters"
        },
        {
            "location": "/custom_components/#lbscommonexecutevba",
            "text": "Execute VBA code, same as old VBA.run()",
            "title": "lbs.common.executeVba()"
        },
        {
            "location": "/custom_components/#syntax_6",
            "text": "lbs.common.executeVba(proc,params)",
            "title": "Syntax"
        },
        {
            "location": "/custom_components/#parameters_5",
            "text": "Parameters  Type      proc  string    params  string    ###### Return     string",
            "title": "Parameters"
        },
        {
            "location": "/custom_components/#lbscommonnl2br",
            "text": "replace nl chars with html rowbreaks",
            "title": "lbs.common.nl2br"
        },
        {
            "location": "/custom_components/#syntax_7",
            "text": "lbs.common.nl2br(data)",
            "title": "Syntax"
        },
        {
            "location": "/custom_components/#parameters_6",
            "text": "Parameters  Type      data  string    ##### Return     string",
            "title": "Parameters"
        },
        {
            "location": "/custom_components/#stringformat",
            "text": "Implementation of c# String.Format()",
            "title": "string.format()"
        },
        {
            "location": "/custom_components/#syntax_8",
            "text": "string.format(format,var1,[var2])",
            "title": "Syntax"
        },
        {
            "location": "/custom_components/#parameters_7",
            "text": "Parameters  Type      format  string    var  replacement varibles    ##### Return     string",
            "title": "Parameters"
        },
        {
            "location": "/custom_components/#lbslogdebug",
            "text": "Log message at debug level",
            "title": "lbs.log.debug"
        },
        {
            "location": "/custom_components/#syntax_9",
            "text": "lbs.log.debug(msg)",
            "title": "Syntax"
        },
        {
            "location": "/custom_components/#parameters_8",
            "text": "Parameters  Type      msg  message",
            "title": "Parameters"
        },
        {
            "location": "/custom_components/#lbslogdebug_1",
            "text": "Log message at info level",
            "title": "lbs.log.debug"
        },
        {
            "location": "/custom_components/#syntax_10",
            "text": "lbs.log.info(msg)",
            "title": "Syntax"
        },
        {
            "location": "/custom_components/#parameters_9",
            "text": "Parameters  Type      msg  message",
            "title": "Parameters"
        },
        {
            "location": "/custom_components/#lbslogwarn",
            "text": "Log message at warn level",
            "title": "lbs.log.warn"
        },
        {
            "location": "/custom_components/#syntax_11",
            "text": "lbs.log.warn(msg, [e])",
            "title": "Syntax"
        },
        {
            "location": "/custom_components/#parameters_10",
            "text": "Parameters  Type      msg  message    e  Execption (optional)",
            "title": "Parameters"
        },
        {
            "location": "/custom_components/#lbslogerror",
            "text": "Log message at error level",
            "title": "lbs.log.error"
        },
        {
            "location": "/custom_components/#syntax_12",
            "text": "lbs.log.error(msg, [e])",
            "title": "Syntax"
        },
        {
            "location": "/custom_components/#parameters_11",
            "text": "|Parameters|Type|\n|---|---|---|\n|msg|message|\n|e|Execption (optional)|",
            "title": "Parameters"
        },
        {
            "location": "/advanced/",
            "text": "Advanced\n\n\nUnder the hoods of LBS\n\n\nThe new Actionpads are inspired of how a single page application work. Views (basically html-templates) and data(usually JSON) are loaded via AJAX (an asyncrounous javacript call) by the the web application. The template is then rendered by applying the data and the result is shown to the user.\n\n\nIn Lime-bootstraps case lbs.html and lbs.js constitute the main application and all Actionpads set to show \nlbs.html\n. For simplification we'll call the framework just \nLBS\n (Lime Bootstrap). \nlbs.html\n contians all included CSS, JS and meta tags. The Actionpads (for example company.html) are now just views, containing no included CSS or JS.\n\n\nlbs.html will detemine which view to load either by a supplied query string (the thing after the questionmark), \n../lbs.html?ap=company\n or if nothing is supplied, by trying to load a view with the same name as the class of the Lime inspector.\n\n\nThe active inspectors record is then loaded as data and converted to JSON.\n\n\nBasic flow in LBS:\n\n\n\n\n\n\nLBS starts and includes all base CSS, Javascript and sets a lot of environment variables, such as skin color, language.\n\n\n\n\n\n\nLBS then checks where you want your display your HTML-view. In Lime you can show HTML in the Actionpad, in a field, in a tab or in a web dialog. If you don't specify anything lbs will assume your building an Actionpad.\n\n\n\n\n\n\nThe specified view, html-file, is loaded\n\n\n\n\n\n\nData is loaded. LBS will first check \n_config.js\n for datasources, specified with the name of the view. If no datasources are found LBS will try to load the data from the \nActiveInspector\n. A dictionary of local languages translations is loaded. All data is supplied as a JSON-object and then converted to a knockout viewmodel-\n\n\n\n\n\n\nApps are discovered, started and their data is loaded into the main viewmodel. A app can specify depencies on other libraries or styles. These are dynamically loaded and checked for duplicates.\n\n\n\n\n\n\nThe viewmodel is applied to the now complete view and rendered.\n\n\n\n\n\n\nLoading views\n\n\nAs metioned lbs.html is the real engine and all HTML things should be loaded trough lbs.html. This is achieved by supplying a query string\n\n\n[URL to Actionpad folder]/lbs.html?ap=[path to your view/view name]\n\n\nThe path is relative the lbs.html file and you should not include the file extension (.html).\n\n\nLoading the company Actionpad (company.html):\n\n\nlbs.html?ap=company\n\n\nThe console and debugging your applications\n\n\nThe framework has been blessed with a virtual console, to use for debugging. It is activated through changing \ndebug: true,\n in \n_config.js\n. The console will allways automagically appeare if a critical error is logged. If you make syntacic errors in the wrong place, even the viritual console will crash. You can easily use the console when building apps, read more abot this in the app readme. The console is limited to 30 messages by default.\n\n\nWhen working with more advanced stuff you might like to have access to a real console. Modern browsers won't allow dynamically loadings scripts from the local file system, due to security concerns. Dynamically loading scripts and html views are core concepts in LBS. In Lime a small VBA function acts as the loader. However in \nsystem/bin/\n you will find a \n.bat-file\n which will restart Google Chrome in a debug mode, allowing you to inspect the CSS and JS. If you dislike this approach a small HTTP-server will do the trick. With Python3 just go to the actionpad folder and write this in your terminal:\n\n\n$python\n -m http.server\n\n\n\n\n\nDifferent wrappers\n\n\nIn Lime HTML can be displayed in the actionpad, in a HTML-field, in a HTML-tab and in a HTML-dialog. Theses places are quite different and requires some basic setup to work well. Your view can thus be loaded into three different wrappers for helping you with the different conditions.\n\n\nThe three basic wrappers of content:\n\n\n\n\nActionpad-wrapper\n. A thin and long wrapper with a slightly lighter background images with a sharp edge to teh rest of the content:\n\n\nInline-wrapper\n. Used for HTML-fields. Completely plain, with the same color as the Inspector and no padding or margin. Built to seamlessly look as a part of the inspector.\n\n\nTab-wrapper\n. Used for wider layouts, such as a tab or a dialog. Uses default Twitter Bootstrap margins and is fully responsive.\n\n\n\n\nThe Actionpad wrapper is allways used unless anything else is stated. Pick your wrapper by suppling a querystring to lbs.html\n\n\n__Inline:\n \nlbs.html?type=inline\n\n\n_Tab:\n \nlbs.html?type=tab\n\n\nWhen working with tabs, fields or dialogs it is easiest to use VBA to set the URL. Example:\n\n\n    ActiveInspector.Controls.SetValue(\"htmlfield\", WebFolder & \"lbs.html?ap=foo&type=inline\")\n\n\n\n\n\nLogic in bindnings\n\n\nKnockout lets you write JavaScript expressions directly in the bindnings. This is a really simple and powerful way of doing cool stuff. Word of advice: Too much logic in the view isn't nice at all. If you need to do a little more advanced stuff, build an app!\n\n\nExample:\n\n\n<\ndiv\n \nclass\n=\n\"alert alert-warning fullwidth\"\n \ndata-bind\n=\n\"\n\n\n    visible: todo.endtime.value !== null && (moment(todo.endtime.value) < moment() && todo.done.value != 1),\n\n\n    text: 'Uppgiften \u00e4r ' + (todo.endtime.value != null ? moment(todo.endtime.value).fromNow(true) : '' )+ ' f\u00f6rsenad!',\n\n\n    icon:'fa-bell'\"\n \n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\nPlease note that you can put the bindings on separate rows to increase readability\n\n\nCookies\n\n\nCookies are used to store values from the actionpads and apps. Every cookie is locally stored in the actionpad folder and is unique for every computer and database (not user). There are two methods that you can use to handle a cookie:\n\n\nGet cookie\n\n\nTo get the value in a cookie use the method lbs.bakery.getCookie(name)\n\n\nvar\n \nmycookievalue\n \n=\n \nlbs\n.\nbakery\n.\ngetCookie\n(\n\u201c\ngingerbread\n\u201d\n)\n\n\n\n\n\n\nSet Cookie\n\n\nTo set a cookie just call the function lbs.bakery.setCookie(name,value,days). See example below.\n\n\nlbs\n.\nbakery\n.\nsetCookie\n(\n\u201c\ngingerbread\n\u201d\n,\nmycookievalue\n,\n3\n)\n\n\n\n\n\n\nBased on Bootstrap\n\n\nLime Bootstrap is based on the popular web framework \nBootstrap\n.\nAll Twitter bootstrap functions are included, please see the \nTwitter bootstrap documentation\n.\nLime Bootstrap also supports all Bootstraps elements. Please see the \nTwitter bootstrap\n documentation for all cool stuff you have access to.\n\n\nWorking with time and dates\n\n\nDates are a hassle, except when you have the awesome library \nMoment.js\n.\n\n\nTo create a iso-date:\n\nmoment()\n\n\nTo parse almost any date format:\n\nmoment([CRAZY DATE FORMAT])\n\n\nMoment even makes time and dates readable to people.\n\nmoment().timeAgo(2011-01-01)\n will give you, \"A few years ago\"\n\n\nMoment is automagically setup to use the same language and date-format as the language of the Lime Client.\nRemember to use it and check out it further!\n\n\nAll included javascript frameworks\n\n\nThe bundled library contains:\n\n\n\n\njQuery\n\n\nUnderscore.js\n\n\nMoment.js\n\n\nKnockout.js\n\n\nBootstrap.js\n\n\n\n\nIcons\n\n\nFont awesome\n is include. Please see the font awesome documentation.",
            "title": "Advanced"
        },
        {
            "location": "/advanced/#advanced",
            "text": "",
            "title": "Advanced"
        },
        {
            "location": "/advanced/#under-the-hoods-of-lbs",
            "text": "The new Actionpads are inspired of how a single page application work. Views (basically html-templates) and data(usually JSON) are loaded via AJAX (an asyncrounous javacript call) by the the web application. The template is then rendered by applying the data and the result is shown to the user.  In Lime-bootstraps case lbs.html and lbs.js constitute the main application and all Actionpads set to show  lbs.html . For simplification we'll call the framework just  LBS  (Lime Bootstrap).  lbs.html  contians all included CSS, JS and meta tags. The Actionpads (for example company.html) are now just views, containing no included CSS or JS.  lbs.html will detemine which view to load either by a supplied query string (the thing after the questionmark),  ../lbs.html?ap=company  or if nothing is supplied, by trying to load a view with the same name as the class of the Lime inspector.  The active inspectors record is then loaded as data and converted to JSON.  Basic flow in LBS:    LBS starts and includes all base CSS, Javascript and sets a lot of environment variables, such as skin color, language.    LBS then checks where you want your display your HTML-view. In Lime you can show HTML in the Actionpad, in a field, in a tab or in a web dialog. If you don't specify anything lbs will assume your building an Actionpad.    The specified view, html-file, is loaded    Data is loaded. LBS will first check  _config.js  for datasources, specified with the name of the view. If no datasources are found LBS will try to load the data from the  ActiveInspector . A dictionary of local languages translations is loaded. All data is supplied as a JSON-object and then converted to a knockout viewmodel-    Apps are discovered, started and their data is loaded into the main viewmodel. A app can specify depencies on other libraries or styles. These are dynamically loaded and checked for duplicates.    The viewmodel is applied to the now complete view and rendered.",
            "title": "Under the hoods of LBS"
        },
        {
            "location": "/advanced/#loading-views",
            "text": "As metioned lbs.html is the real engine and all HTML things should be loaded trough lbs.html. This is achieved by supplying a query string  [URL to Actionpad folder]/lbs.html?ap=[path to your view/view name]  The path is relative the lbs.html file and you should not include the file extension (.html).  Loading the company Actionpad (company.html):  lbs.html?ap=company",
            "title": "Loading views"
        },
        {
            "location": "/advanced/#the-console-and-debugging-your-applications",
            "text": "The framework has been blessed with a virtual console, to use for debugging. It is activated through changing  debug: true,  in  _config.js . The console will allways automagically appeare if a critical error is logged. If you make syntacic errors in the wrong place, even the viritual console will crash. You can easily use the console when building apps, read more abot this in the app readme. The console is limited to 30 messages by default.  When working with more advanced stuff you might like to have access to a real console. Modern browsers won't allow dynamically loadings scripts from the local file system, due to security concerns. Dynamically loading scripts and html views are core concepts in LBS. In Lime a small VBA function acts as the loader. However in  system/bin/  you will find a  .bat-file  which will restart Google Chrome in a debug mode, allowing you to inspect the CSS and JS. If you dislike this approach a small HTTP-server will do the trick. With Python3 just go to the actionpad folder and write this in your terminal:  $python  -m http.server",
            "title": "The console and debugging your applications"
        },
        {
            "location": "/advanced/#different-wrappers",
            "text": "In Lime HTML can be displayed in the actionpad, in a HTML-field, in a HTML-tab and in a HTML-dialog. Theses places are quite different and requires some basic setup to work well. Your view can thus be loaded into three different wrappers for helping you with the different conditions.  The three basic wrappers of content:   Actionpad-wrapper . A thin and long wrapper with a slightly lighter background images with a sharp edge to teh rest of the content:  Inline-wrapper . Used for HTML-fields. Completely plain, with the same color as the Inspector and no padding or margin. Built to seamlessly look as a part of the inspector.  Tab-wrapper . Used for wider layouts, such as a tab or a dialog. Uses default Twitter Bootstrap margins and is fully responsive.   The Actionpad wrapper is allways used unless anything else is stated. Pick your wrapper by suppling a querystring to lbs.html  __Inline:   lbs.html?type=inline  _Tab:   lbs.html?type=tab  When working with tabs, fields or dialogs it is easiest to use VBA to set the URL. Example:      ActiveInspector.Controls.SetValue(\"htmlfield\", WebFolder & \"lbs.html?ap=foo&type=inline\")",
            "title": "Different wrappers"
        },
        {
            "location": "/advanced/#logic-in-bindnings",
            "text": "Knockout lets you write JavaScript expressions directly in the bindnings. This is a really simple and powerful way of doing cool stuff. Word of advice: Too much logic in the view isn't nice at all. If you need to do a little more advanced stuff, build an app!  Example:  < div   class = \"alert alert-warning fullwidth\"   data-bind = \"      visible: todo.endtime.value !== null && (moment(todo.endtime.value) < moment() && todo.done.value != 1),      text: 'Uppgiften \u00e4r ' + (todo.endtime.value != null ? moment(todo.endtime.value).fromNow(true) : '' )+ ' f\u00f6rsenad!',      icon:'fa-bell'\"   >  </ div >   Please note that you can put the bindings on separate rows to increase readability",
            "title": "Logic in bindnings"
        },
        {
            "location": "/advanced/#cookies",
            "text": "Cookies are used to store values from the actionpads and apps. Every cookie is locally stored in the actionpad folder and is unique for every computer and database (not user). There are two methods that you can use to handle a cookie:",
            "title": "Cookies"
        },
        {
            "location": "/advanced/#get-cookie",
            "text": "To get the value in a cookie use the method lbs.bakery.getCookie(name)  var   mycookievalue   =   lbs . bakery . getCookie ( \u201c gingerbread \u201d )",
            "title": "Get cookie"
        },
        {
            "location": "/advanced/#set-cookie",
            "text": "To set a cookie just call the function lbs.bakery.setCookie(name,value,days). See example below.  lbs . bakery . setCookie ( \u201c gingerbread \u201d , mycookievalue , 3 )",
            "title": "Set Cookie"
        },
        {
            "location": "/advanced/#based-on-bootstrap",
            "text": "Lime Bootstrap is based on the popular web framework  Bootstrap .\nAll Twitter bootstrap functions are included, please see the  Twitter bootstrap documentation .\nLime Bootstrap also supports all Bootstraps elements. Please see the  Twitter bootstrap  documentation for all cool stuff you have access to.",
            "title": "Based on Bootstrap"
        },
        {
            "location": "/advanced/#working-with-time-and-dates",
            "text": "Dates are a hassle, except when you have the awesome library  Moment.js .  To create a iso-date: moment()  To parse almost any date format: moment([CRAZY DATE FORMAT])  Moment even makes time and dates readable to people. moment().timeAgo(2011-01-01)  will give you, \"A few years ago\"  Moment is automagically setup to use the same language and date-format as the language of the Lime Client.\nRemember to use it and check out it further!",
            "title": "Working with time and dates"
        },
        {
            "location": "/advanced/#all-included-javascript-frameworks",
            "text": "The bundled library contains:   jQuery  Underscore.js  Moment.js  Knockout.js  Bootstrap.js",
            "title": "All included javascript frameworks"
        },
        {
            "location": "/advanced/#icons",
            "text": "Font awesome  is include. Please see the font awesome documentation.",
            "title": "Icons"
        },
        {
            "location": "/components/lbs-alert/",
            "text": "lbs-alert\n\n\nComponent for showing messages\n\n\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nText to be displayed\n\n\n'Call this customer!'\n\n\n''\n\n\n\n\n\n\nicon\n\n\nOptional Font Awesome icon\n\n\n'fa-exclamation-triangle'\n\n\nnull\n\n\n\n\n\n\nalertType\n\n\nType of alert\n\n\n'warning'\n\n\n'info'\n\n\n\n\n\n\n\n\nList of alert types and their corresponding colors:\n\n warning: yellow\n\n info: blue\n\n danger: red\n\n success: green\n\n\n\n\nInfo\n\n\nSee \nFont Awesome 4 docs\n for available icons\n\n\n\n\nChild elements\n\n\nIf you want to add custom content to your alert, you can add this as child elements to the component.\n\n\nUsage\n\n\n<lbs-alert\n \nparams=\n\"text: 'This customer is satisfied', alertType: 'success'\"\n></lbs-alert>\n\n\n\n\n\n\nOr\n\n\n<lbs-alert\n \nparams=\n\"alertType: 'danger'\"\n>\n\n    \n<lbs-icon\n \nparams=\n\"icon: 'fa-exclamation'\"\n></lbs-icon>\n\n    \n<span>\nCustomer is maaad!\n</span>\n\n\n</lbs-alert>",
            "title": "Alert"
        },
        {
            "location": "/components/lbs-alert/#lbs-alert",
            "text": "Component for showing messages      Param  Explanation  Example value  Default value      text  Text to be displayed  'Call this customer!'  ''    icon  Optional Font Awesome icon  'fa-exclamation-triangle'  null    alertType  Type of alert  'warning'  'info'     List of alert types and their corresponding colors:  warning: yellow  info: blue  danger: red  success: green   Info  See  Font Awesome 4 docs  for available icons",
            "title": "lbs-alert"
        },
        {
            "location": "/components/lbs-alert/#child-elements",
            "text": "If you want to add custom content to your alert, you can add this as child elements to the component.",
            "title": "Child elements"
        },
        {
            "location": "/components/lbs-alert/#usage",
            "text": "<lbs-alert   params= \"text: 'This customer is satisfied', alertType: 'success'\" ></lbs-alert>   Or  <lbs-alert   params= \"alertType: 'danger'\" > \n     <lbs-icon   params= \"icon: 'fa-exclamation'\" ></lbs-icon> \n     <span> Customer is maaad! </span>  </lbs-alert>",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-buttons/",
            "text": "lbs-button\n\n\nLime specific button which can be styled using the official colors of Lime Bootstrap. These buttons will always have width 100% but will otherwise follow the Twitter Bootstrap styling.\n\n\n\n\nParams\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ncolor\n\n\nOne of LBS standard colors\n\n\n'lime-green'\n\n\n'turquoise'\n\n\n\n\n\n\nbootstrapClass\n\n\nOne of Bootstrap button classes\n\n\n'btn-success'\n\n\n''\n\n\n\n\n\n\nicon\n\n\nFont awesome icon of your choice\n\n\n'fa-calendar'\n\n\nnull\n\n\n\n\n\n\ntext\n\n\nText on your button\n\n\n'My button'\n\n\n''\n\n\n\n\n\n\ncentered\n\n\nBoolean for centering text\n\n\ntrue\n\n\nfalse\n\n\n\n\n\n\nfullWidth\n\n\nBoolean if button should be full width\n\n\nfalse\n\n\ntrue\n\n\n\n\n\n\nalternative\n\n\nBoolean if button should be styled alternatively\n\n\ntrue\n\n\nfalse\n\n\n\n\n\n\nborderless\n\n\nBoolean if button border should be excluded\n\n\ntrue\n\n\nfalse\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\nSee \nFont Awesome 4 docs\n for available icons\n\n\n\n\n\n\nWarning\n\n\nYou cannot combine the params \ncolor\n and \nbootstrapClass\n.\n\n\n\n\nUsage\n\n\n<lbs-button\n \nparams=\n\"text: 'My button', color: 'magenta', icon: 'fa-money'\"\n></lbs-button>\n\n\n\n\n\n\n\n\nlbs-button-group\n\n\nA component to group buttons together. Removes margins and border radius for edges between buttons.\n\n\nParams\n\n\nNo params available\n\n\n\n\nChild elements\n\n\nThe component \nlbs-button-group\n can be used with two different child elements:\n\n Twitter Bootstrap buttons (using class \n.btn\n)\n\n LBS buttons (using component \nlbs-button\n)\n\n\nUsage\n\n\nUsing lbs-buttons:\n\n\n<lbs-button-group>\n\n    \n<lbs-button\n \nparams=\n\"text: 'My button', color: 'magenta', icon: 'fa-money'\"\n></lbs-button>\n\n    \n<lbs-button\n \nparams=\n\"text: 'My button 2', color: 'orange', icon: 'fa-calendar'\"\n></lbs-button>\n\n\n</lbs-button-group>\n\n\n\n\n\n\nUsing Twitter Bootstrap buttons:\n\n\n<lbs-button-group>\n\n    \n<button\n \nclass=\n\"btn btn-default\"\n \ndata-bind=\n\"icon: 'fa-money', text: 'My button'\"\n></button>\n\n    \n<button\n \nclass=\n\"btn btn-success\"\n \ndata-bind=\n\"icon: 'fa-calendar', text: 'My button 2'\"\n></button>\n\n\n</lbs-button-group>\n\n\n\n\n\n\n\n\nlbs-split-button\n\n\nA component to group two buttons together. The first button will take 80% of the width of the component and the second one 20%.\n\n\n\n\nParams\n\n\nNo params available\n\n\nChild elements\n\n\nThe component \nlbs-split-button\n can be used with two different child elements:\n\n Twitter Bootstrap buttons (using class \n.btn\n)\n\n LBS buttons (using component \nlbs-button\n)\n\n\nUsage\n\n\nUsing lbs-buttons:\n\n\n<lbs-split-button>\n\n    \n<lbs-button\n \nparams=\n\"text: 'My button', color: 'magenta', icon: 'fa-money'\"\n></lbs-button>\n\n    \n<lbs-button\n \nparams=\n\"text: 'My button 2', color: 'orange', icon: 'fa-calendar'\"\n></lbs-button>\n\n\n</lbs-split-button>\n\n\n\n\n\n\nUsing Twitter Bootstrap buttons:\n\n\n<lbs-split-button>\n\n    \n<button\n \nclass=\n\"btn btn-default\"\n \ndata-bind=\n\"icon: 'fa-money', text: 'My button'\"\n></button>\n\n    \n<button\n \nclass=\n\"btn btn-success\"\n \ndata-bind=\n\"icon: 'fa-calendar', text: 'My button 2'\"\n></button>\n\n\n</lbs-split-button>\n\n\n\n\n\n\n\n\nlbs-dropdown-menu\n\n\nComponent for listing items with optional actions.\n\n\n\n\nParams\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ncolor\n\n\nButton color\n\n\n'magenta'\n\n\n'turquoise'\n\n\n\n\n\n\ntitle\n\n\nOptional button text\n\n\n'Check this out!'\n\n\n''\n\n\n\n\n\n\nicon\n\n\nOptional Font Awesome icon\n\n\n'fa-ellipsis-v'\n\n\n'fa-chevron-down'\n\n\n\n\n\n\nfullWidth\n\n\nBoolean if full width button\n\n\ntrue\n\n\nfalse\n\n\n\n\n\n\nheroMenu\n\n\nUsed by lbs-hero. Should probably not be used outside of that\n\n\nfalse\n\n\nfalse\n\n\n\n\n\n\nborderless\n\n\nBoolean if button border should be excluded\n\n\ntrue\n\n\nfalse\n\n\n\n\n\n\nitems\n\n\nArray with objects in the dropdown menu.\n\n\nSee below\n\n\n[]\n\n\n\n\n\n\n\n\nItem configuration\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nText shown in the list item\n\n\n'Postpone'\n\n\n''\n\n\n\n\n\n\nicon\n\n\nOptional icon to the left of the text\n\n\n'fa-user'\n\n\n''\n\n\n\n\n\n\nclick\n\n\nJavascript function to run on click\n\n\n() => { alert('Hi') }\n\n\nnull\n\n\n\n\n\n\nvba\n\n\nVBA sub to run on click. Can be combined with click.\n\n\n'Module.Sub'\n\n\nnull\n\n\n\n\n\n\ntype\n\n\nitem\n or \ndivider\n\n\n'item'\n\n\n'item'\n\n\n\n\n\n\n\n\nNote\n: All other parameters will be disregarded if type is set to \ndivider\n.\n\n\nUsage\n\n\n<lbs-dropdown-menu\n \nparams=\n\"title: 'Check this out!', items: [{ label: 'My menu item', icon: 'fa-bowling-ball' }]\"\n>\n\n    \n<lbs-list-item\n \nparams=\n\"text: 'Additional item!', icon: 'fa-calendar'\"\n></lbs-list-item>\n\n\n</lbs-dropdown-menu>",
            "title": "Button components"
        },
        {
            "location": "/components/lbs-buttons/#lbs-button",
            "text": "Lime specific button which can be styled using the official colors of Lime Bootstrap. These buttons will always have width 100% but will otherwise follow the Twitter Bootstrap styling.",
            "title": "lbs-button"
        },
        {
            "location": "/components/lbs-buttons/#params",
            "text": "Param  Explanation  Example value  Default value      color  One of LBS standard colors  'lime-green'  'turquoise'    bootstrapClass  One of Bootstrap button classes  'btn-success'  ''    icon  Font awesome icon of your choice  'fa-calendar'  null    text  Text on your button  'My button'  ''    centered  Boolean for centering text  true  false    fullWidth  Boolean if button should be full width  false  true    alternative  Boolean if button should be styled alternatively  true  false    borderless  Boolean if button border should be excluded  true  false      Info  See  Font Awesome 4 docs  for available icons    Warning  You cannot combine the params  color  and  bootstrapClass .",
            "title": "Params"
        },
        {
            "location": "/components/lbs-buttons/#usage",
            "text": "<lbs-button   params= \"text: 'My button', color: 'magenta', icon: 'fa-money'\" ></lbs-button>",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-buttons/#lbs-button-group",
            "text": "A component to group buttons together. Removes margins and border radius for edges between buttons.",
            "title": "lbs-button-group"
        },
        {
            "location": "/components/lbs-buttons/#params_1",
            "text": "No params available",
            "title": "Params"
        },
        {
            "location": "/components/lbs-buttons/#child-elements",
            "text": "The component  lbs-button-group  can be used with two different child elements:  Twitter Bootstrap buttons (using class  .btn )  LBS buttons (using component  lbs-button )",
            "title": "Child elements"
        },
        {
            "location": "/components/lbs-buttons/#usage_1",
            "text": "Using lbs-buttons:  <lbs-button-group> \n     <lbs-button   params= \"text: 'My button', color: 'magenta', icon: 'fa-money'\" ></lbs-button> \n     <lbs-button   params= \"text: 'My button 2', color: 'orange', icon: 'fa-calendar'\" ></lbs-button>  </lbs-button-group>   Using Twitter Bootstrap buttons:  <lbs-button-group> \n     <button   class= \"btn btn-default\"   data-bind= \"icon: 'fa-money', text: 'My button'\" ></button> \n     <button   class= \"btn btn-success\"   data-bind= \"icon: 'fa-calendar', text: 'My button 2'\" ></button>  </lbs-button-group>",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-buttons/#lbs-split-button",
            "text": "A component to group two buttons together. The first button will take 80% of the width of the component and the second one 20%.",
            "title": "lbs-split-button"
        },
        {
            "location": "/components/lbs-buttons/#params_2",
            "text": "No params available",
            "title": "Params"
        },
        {
            "location": "/components/lbs-buttons/#child-elements_1",
            "text": "The component  lbs-split-button  can be used with two different child elements:  Twitter Bootstrap buttons (using class  .btn )  LBS buttons (using component  lbs-button )",
            "title": "Child elements"
        },
        {
            "location": "/components/lbs-buttons/#usage_2",
            "text": "Using lbs-buttons:  <lbs-split-button> \n     <lbs-button   params= \"text: 'My button', color: 'magenta', icon: 'fa-money'\" ></lbs-button> \n     <lbs-button   params= \"text: 'My button 2', color: 'orange', icon: 'fa-calendar'\" ></lbs-button>  </lbs-split-button>   Using Twitter Bootstrap buttons:  <lbs-split-button> \n     <button   class= \"btn btn-default\"   data-bind= \"icon: 'fa-money', text: 'My button'\" ></button> \n     <button   class= \"btn btn-success\"   data-bind= \"icon: 'fa-calendar', text: 'My button 2'\" ></button>  </lbs-split-button>",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-buttons/#lbs-dropdown-menu",
            "text": "Component for listing items with optional actions.",
            "title": "lbs-dropdown-menu"
        },
        {
            "location": "/components/lbs-buttons/#params_3",
            "text": "Param  Explanation  Example value  Default value      color  Button color  'magenta'  'turquoise'    title  Optional button text  'Check this out!'  ''    icon  Optional Font Awesome icon  'fa-ellipsis-v'  'fa-chevron-down'    fullWidth  Boolean if full width button  true  false    heroMenu  Used by lbs-hero. Should probably not be used outside of that  false  false    borderless  Boolean if button border should be excluded  true  false    items  Array with objects in the dropdown menu.  See below  []",
            "title": "Params"
        },
        {
            "location": "/components/lbs-buttons/#item-configuration",
            "text": "Param  Explanation  Example value  Default value      label  Text shown in the list item  'Postpone'  ''    icon  Optional icon to the left of the text  'fa-user'  ''    click  Javascript function to run on click  () => { alert('Hi') }  null    vba  VBA sub to run on click. Can be combined with click.  'Module.Sub'  null    type  item  or  divider  'item'  'item'     Note : All other parameters will be disregarded if type is set to  divider .",
            "title": "Item configuration"
        },
        {
            "location": "/components/lbs-buttons/#usage_3",
            "text": "<lbs-dropdown-menu   params= \"title: 'Check this out!', items: [{ label: 'My menu item', icon: 'fa-bowling-ball' }]\" > \n     <lbs-list-item   params= \"text: 'Additional item!', icon: 'fa-calendar'\" ></lbs-list-item>  </lbs-dropdown-menu>",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-card/",
            "text": "lbs-card\n\n\nA card like component to use to put other components in\n\n\n\n\nParams\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ncolor\n\n\nOne of LBS standard colors\n\n\n'lime-green'\n\n\n'turquoise'\n\n\n\n\n\n\ntitle\n\n\nHeader text for the card\n\n\n'Lime Technologies'\n\n\n''\n\n\n\n\n\n\nicon\n\n\nName of the header icon\n\n\n'fa-calendar'\n\n\n\n\n\n\n\n\nexpandable\n\n\nSet if card body can be expanded or not\n\n\ntrue\n or \nfalse\n\n\ntrue\n\n\n\n\n\n\nexpanded\n\n\nDefault expanded state\n\n\ntrue\n or \nfalse\n\n\ntrue\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\nThe component will save the expanded state in a cookie. Thus a user will find the cards in the same way she left them as long as they are on the same machine\n\n\n\n\nUsage\n\n\n<lbs-card\n \nparams=\n\"title: 'My card'\"\n>\n\n    \n<div>\n My data here! \n</div>\n\n\n</lbs-card>",
            "title": "Card"
        },
        {
            "location": "/components/lbs-card/#lbs-card",
            "text": "A card like component to use to put other components in",
            "title": "lbs-card"
        },
        {
            "location": "/components/lbs-card/#params",
            "text": "Param  Explanation  Example value  Default value      color  One of LBS standard colors  'lime-green'  'turquoise'    title  Header text for the card  'Lime Technologies'  ''    icon  Name of the header icon  'fa-calendar'     expandable  Set if card body can be expanded or not  true  or  false  true    expanded  Default expanded state  true  or  false  true      Info  The component will save the expanded state in a cookie. Thus a user will find the cards in the same way she left them as long as they are on the same machine",
            "title": "Params"
        },
        {
            "location": "/components/lbs-card/#usage",
            "text": "<lbs-card   params= \"title: 'My card'\" > \n     <div>  My data here!  </div>  </lbs-card>",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-guard/",
            "text": "lbs-guard\n\n\nGuards its content from being rendered. Used to protect against null values and/or active users group membership\n\n\nParams\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nactiveUserIsMemberInOneOfGroups\n\n\nChecks if active user belongs to group\n\n\n['Administrators', 'CIA']\n\n\nundefined\n\n\n\n\n\n\nexists\n\n\nChecks if value is null or undefined\n\n\ncompany.undefinedOrNullProp\n\n\nundefined\n\n\n\n\n\n\n\n\nlbs-guard\n can be used with both or either of the input params.\n\n\nUsage\n\n\n<lbs-guard\n \nparams=\n\"activeUserIsMemberInOneOfGroups: ['Administrators']\"\n>\n\n    ...\n\n</lbs-menu>\n\n\n\n<lbs-guard\n \nparams=\n\"exists: company.undefinedOrNullProp \"\n>\n\n    ...\n\n</lbs-menu>\n\n\n\n\n\n\n\n\nInfo\n\n\nMost properties on LimeObjects that doesn't currently hold any value will default to empty string \n\"\"\n.\n\nexists\n will only check for \nnull\n or \nundefined\n, passing other \"falsey\" values will not cause the guard to be applied",
            "title": "Guard"
        },
        {
            "location": "/components/lbs-guard/#lbs-guard",
            "text": "Guards its content from being rendered. Used to protect against null values and/or active users group membership",
            "title": "lbs-guard"
        },
        {
            "location": "/components/lbs-guard/#params",
            "text": "Param  Explanation  Example value  Default value      activeUserIsMemberInOneOfGroups  Checks if active user belongs to group  ['Administrators', 'CIA']  undefined    exists  Checks if value is null or undefined  company.undefinedOrNullProp  undefined     lbs-guard  can be used with both or either of the input params.",
            "title": "Params"
        },
        {
            "location": "/components/lbs-guard/#usage",
            "text": "<lbs-guard   params= \"activeUserIsMemberInOneOfGroups: ['Administrators']\" > \n    ... </lbs-menu>  <lbs-guard   params= \"exists: company.undefinedOrNullProp \" > \n    ... </lbs-menu>    Info  Most properties on LimeObjects that doesn't currently hold any value will default to empty string  \"\" . exists  will only check for  null  or  undefined , passing other \"falsey\" values will not cause the guard to be applied",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-hero/",
            "text": "lbs-hero\n\n\nComponent for adding a hero (banner like header) for an actionpad.\n\n\n\n\nParams\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ncolor\n\n\nOne of LBS standard colors\n\n\n'lime-green'\n\n\n'turquoise'\n\n\n\n\n\n\nheader\n\n\nHeader text for the hero\n\n\n'Lime Technologies'\n\n\n''\n\n\n\n\n\n\nimg\n\n\nName of the header image\n\n\n'fa-calendar'\n\n\n\n\n\n\n\n\nmenuItems\n\n\nArray with objects defining a context menu.\n\n\nSee below\n\n\n[]\n\n\n\n\n\n\n\n\n\n\nContext menu\n\n\nThe context menu is automatically added to the lbs-hero component if the array \nmenuItems\n is supplied and has more than 0 elements. Each element in the array has the following options:\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nText shown in the list item\n\n\n'Postpone'\n\n\n''\n\n\n\n\n\n\nicon\n\n\nOptional icon to the left of the text\n\n\n'fa-user'\n\n\n''\n\n\n\n\n\n\nclick\n\n\nJavascript function to run on click\n\n\n() => { alert('Hi') }\n\n\nnull\n\n\n\n\n\n\nvba\n\n\nVBA sub to run on click. Can be combined with click.\n\n\n'Module.Sub'\n\n\nnull\n\n\n\n\n\n\ntype\n\n\nitem\n or \ndivider\n\n\n'item'\n\n\n'item'\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\nAll other parameters will be disregarded if type is set to \ndivider\n.\n\n\n\n\n\n\nWarning\n\n\nYou need to supply the image to the dist/resource/ folder if the name of the image is anything else than \ndist/resource/classname.png\n.\n\n\n\n\nUsage\n\n\n<lbs-hero\n \nparams=\n\"header: company.name, menuItems: [{ label: 'My hero item', icon: 'fa-bowling-ball' }]\"\n>\n\n    \n<lbs-list-item\n \nparams=\n\"text: company.visitingcity, icon: 'fa-map-marker'\"\n \ndata-bind=\n\"openMap: company.fullvisitingaddress\"\n></lbs-list-item>\n\n    \n<lbs-list-item\n \nparams=\n\"text: company.phone, call: company.phone, icon: 'fa-phone'\"\n \ndata-bind=\n\"call: company.phone\"\n></lbs-list-item>\n\n    \n<lbs-list-item\n \nparams=\n\"text: company.www, openURL: company.www, icon: 'fa-globe'\"\n \ndata-bind=\n\"openURL: company.www\"\n></lbs-list-item>\n\n\n</lbs-hero>",
            "title": "Hero"
        },
        {
            "location": "/components/lbs-hero/#lbs-hero",
            "text": "Component for adding a hero (banner like header) for an actionpad.",
            "title": "lbs-hero"
        },
        {
            "location": "/components/lbs-hero/#params",
            "text": "Param  Explanation  Example value  Default value      color  One of LBS standard colors  'lime-green'  'turquoise'    header  Header text for the hero  'Lime Technologies'  ''    img  Name of the header image  'fa-calendar'     menuItems  Array with objects defining a context menu.  See below  []",
            "title": "Params"
        },
        {
            "location": "/components/lbs-hero/#context-menu",
            "text": "The context menu is automatically added to the lbs-hero component if the array  menuItems  is supplied and has more than 0 elements. Each element in the array has the following options:     Param  Explanation  Example value  Default value      label  Text shown in the list item  'Postpone'  ''    icon  Optional icon to the left of the text  'fa-user'  ''    click  Javascript function to run on click  () => { alert('Hi') }  null    vba  VBA sub to run on click. Can be combined with click.  'Module.Sub'  null    type  item  or  divider  'item'  'item'      Info  All other parameters will be disregarded if type is set to  divider .    Warning  You need to supply the image to the dist/resource/ folder if the name of the image is anything else than  dist/resource/classname.png .",
            "title": "Context menu"
        },
        {
            "location": "/components/lbs-hero/#usage",
            "text": "<lbs-hero   params= \"header: company.name, menuItems: [{ label: 'My hero item', icon: 'fa-bowling-ball' }]\" > \n     <lbs-list-item   params= \"text: company.visitingcity, icon: 'fa-map-marker'\"   data-bind= \"openMap: company.fullvisitingaddress\" ></lbs-list-item> \n     <lbs-list-item   params= \"text: company.phone, call: company.phone, icon: 'fa-phone'\"   data-bind= \"call: company.phone\" ></lbs-list-item> \n     <lbs-list-item   params= \"text: company.www, openURL: company.www, icon: 'fa-globe'\"   data-bind= \"openURL: company.www\" ></lbs-list-item>  </lbs-hero>",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-icon/",
            "text": "lbs-icon\n\n\nComponent for adding a Font Awesome 4 icon\n\n\nParams\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nicon\n\n\nFont awesome icon\n\n\n'fa-calendar'\n\n\nnull\n\n\n\n\n\n\noptions\n\n\nAdditional options to Font Awesome\n\n\n'fa-lg'\n\n\n''\n\n\n\n\n\n\n\n\nUsage\n\n\n<lbs-icon\n \nparams=\n\"icon: 'fa-user', options: 'fa-5x'\"\n></lbs-icon>\n\n\n\n\n\n\n\n\nInfo\n\n\nSee \nFont Awesome 4 docs\n for available icons",
            "title": "Icon"
        },
        {
            "location": "/components/lbs-icon/#lbs-icon",
            "text": "Component for adding a Font Awesome 4 icon",
            "title": "lbs-icon"
        },
        {
            "location": "/components/lbs-icon/#params",
            "text": "Param  Explanation  Example value  Default value      icon  Font awesome icon  'fa-calendar'  null    options  Additional options to Font Awesome  'fa-lg'  ''",
            "title": "Params"
        },
        {
            "location": "/components/lbs-icon/#usage",
            "text": "<lbs-icon   params= \"icon: 'fa-user', options: 'fa-5x'\" ></lbs-icon>    Info  See  Font Awesome 4 docs  for available icons",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-lists/",
            "text": "lbs-list-item\n\n\n\n\nComponent for list items in various LBS components that implement these.\n\n\n\n\nInfo\n\n\nMust be used inside a \nul\n-like component, such as \nlbs-menu\n or \nlbs-dropdown-menu\n\n\n\n\nParams\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nText for the list item\n\n\n'Call mom'\n\n\n''\n\n\n\n\n\n\nicon\n\n\nOptional Font Awesome icon\n\n\n'fa-phone'\n\n\n\n\n\n\n\n\n\n\nUsage\n\n\n...\n\n<lbs-list-item\n \nparams=\n\"text: 'Postpone todo', icon: 'fa-calendar'\"\n></lbs-list-item>\n\n...\n\n\n\n\n\n\n\nInfo\n\n\nSee \nFont Awesome 4 docs\n for available icons\n\n\n\n\n\n\nlbs-list-divider\n\n\nComponent for creating a list divider in various LBS components that implement these\n\n\n\n\nInfo\n\n\nMust be used inside a \nul\n-like component, such as \nlbs-menu\n or \nlbs-dropdown-menu\n\n\n\n\nParams\n\n\nNone\n\n\nUsage\n\n\n...\n\n<lbs-list-divider></lbs-list-divider>\n\n...",
            "title": "List components"
        },
        {
            "location": "/components/lbs-lists/#lbs-list-item",
            "text": "Component for list items in various LBS components that implement these.   Info  Must be used inside a  ul -like component, such as  lbs-menu  or  lbs-dropdown-menu",
            "title": "lbs-list-item"
        },
        {
            "location": "/components/lbs-lists/#params",
            "text": "Param  Explanation  Example value  Default value      text  Text for the list item  'Call mom'  ''    icon  Optional Font Awesome icon  'fa-phone'",
            "title": "Params"
        },
        {
            "location": "/components/lbs-lists/#usage",
            "text": "... <lbs-list-item   params= \"text: 'Postpone todo', icon: 'fa-calendar'\" ></lbs-list-item> \n...   Info  See  Font Awesome 4 docs  for available icons",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-lists/#lbs-list-divider",
            "text": "Component for creating a list divider in various LBS components that implement these   Info  Must be used inside a  ul -like component, such as  lbs-menu  or  lbs-dropdown-menu",
            "title": "lbs-list-divider"
        },
        {
            "location": "/components/lbs-lists/#params_1",
            "text": "None",
            "title": "Params"
        },
        {
            "location": "/components/lbs-lists/#usage_1",
            "text": "... <lbs-list-divider></lbs-list-divider> \n...",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-loading-indicator/",
            "text": "lbs-loading-indicator\n\n\nHides the content inside the component and shows a spinner until load is complete\n\n\n\n\nParams\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nloading\n\n\nShould be a observable\n\n\ntrue\n or \nfalse\n\n\n\n\n\n\n\n\nsize\n\n\nMust be one of 'sm', 'md', 'lg', 'xl'\n\n\n'sm'\n\n\n'md'\n\n\n\n\n\n\n\n\nUsage\n\n\n<lbs-loading-indicator\n \nparams=\n\"loading: loading(), size: 'lg'\"\n>\n\n    \n<span>\n{{\nmsg\n}}\n</span>\n\n\n</lbs-loading-indicator>",
            "title": "Loading indicator"
        },
        {
            "location": "/components/lbs-loading-indicator/#lbs-loading-indicator",
            "text": "Hides the content inside the component and shows a spinner until load is complete",
            "title": "lbs-loading-indicator"
        },
        {
            "location": "/components/lbs-loading-indicator/#params",
            "text": "Param  Explanation  Example value  Default value      loading  Should be a observable  true  or  false     size  Must be one of 'sm', 'md', 'lg', 'xl'  'sm'  'md'",
            "title": "Params"
        },
        {
            "location": "/components/lbs-loading-indicator/#usage",
            "text": "<lbs-loading-indicator   params= \"loading: loading(), size: 'lg'\" > \n     <span> {{ msg }} </span>  </lbs-loading-indicator>",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-menu/",
            "text": "lbs-menu\n\n\nExpandable menu component.\n\n\n\n\nParams\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nTitle text for the menu\n\n\n'Links'\n\n\n''\n\n\n\n\n\n\nexpanded\n\n\nBoolean if expanded when first loaded\n\n\nfalse\n\n\ntrue\n\n\n\n\n\n\n\n\nChild elements\n\n\nThe component \nlbs-menu\n should be used with one type of child element:\n* LBS List item (\n<lbs-list-item>\n)\n\n\nUsage\n\n\n<lbs-menu\n \nparams=\n\"title: 'Links', expanded: true\"\n>\n\n    \n<lbs-list-item\n \nparams=\n\"text: 'Do funny stuff', icon: 'fa-calendar'\"\n \ndata-bind=\n\"click: runMyFunction\"\n></li>\n\n\n</lbs-menu>\n\n\n\n\n\n\n\n\nInfo\n\n\nThe component will save the expanded state in a cookie. Thus a user will find the menues in the same way she left them as long as they are on the same machine",
            "title": "Menu"
        },
        {
            "location": "/components/lbs-menu/#lbs-menu",
            "text": "Expandable menu component.",
            "title": "lbs-menu"
        },
        {
            "location": "/components/lbs-menu/#params",
            "text": "Param  Explanation  Example value  Default value      title  Title text for the menu  'Links'  ''    expanded  Boolean if expanded when first loaded  false  true",
            "title": "Params"
        },
        {
            "location": "/components/lbs-menu/#child-elements",
            "text": "The component  lbs-menu  should be used with one type of child element:\n* LBS List item ( <lbs-list-item> )",
            "title": "Child elements"
        },
        {
            "location": "/components/lbs-menu/#usage",
            "text": "<lbs-menu   params= \"title: 'Links', expanded: true\" > \n     <lbs-list-item   params= \"text: 'Do funny stuff', icon: 'fa-calendar'\"   data-bind= \"click: runMyFunction\" ></li>  </lbs-menu>    Info  The component will save the expanded state in a cookie. Thus a user will find the menues in the same way she left them as long as they are on the same machine",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-search/",
            "text": "lbs-search\n\n\nA input element for searching\n\n\nParams\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nTitle text for the menu\n\n\n'Links'\n\n\n''\n\n\n\n\n\n\nfilter\n\n\nTitle text for the menu\n\n\n'Links'\n\n\n''\n\n\n\n\n\n\nclear\n\n\nTitle text for the menu\n\n\n'Links'\n\n\n''\n\n\n\n\n\n\nicon\n\n\nTitle text for the menu\n\n\n'Links'\n\n\n''\n\n\n\n\n\n\nplaceholder\n\n\nBoolean\n\n\nfalse\n\n\ntrue\n\n\n\n\n\n\n\n\nChild elements\n\n\nThe component \nlbs-search\n should be used with one type of child element:\n* LBS List item (\n<lbs-list-item>\n)\n\n\nUsage\n\n\n<lbs-menu\n \nparams=\n\"title: 'Links', expanded: true\"\n>\n\n    \n<lbs-list-item\n \nparams=\n\"text: 'Do funny stuff', icon: 'fa-calendar'\"\n \ndata-bind=\n\"click: runMyFunction\"\n></li>\n\n\n</lbs-menu>",
            "title": "Search"
        },
        {
            "location": "/components/lbs-search/#lbs-search",
            "text": "A input element for searching",
            "title": "lbs-search"
        },
        {
            "location": "/components/lbs-search/#params",
            "text": "Param  Explanation  Example value  Default value      title  Title text for the menu  'Links'  ''    filter  Title text for the menu  'Links'  ''    clear  Title text for the menu  'Links'  ''    icon  Title text for the menu  'Links'  ''    placeholder  Boolean  false  true",
            "title": "Params"
        },
        {
            "location": "/components/lbs-search/#child-elements",
            "text": "The component  lbs-search  should be used with one type of child element:\n* LBS List item ( <lbs-list-item> )",
            "title": "Child elements"
        },
        {
            "location": "/components/lbs-search/#usage",
            "text": "<lbs-menu   params= \"title: 'Links', expanded: true\" > \n     <lbs-list-item   params= \"text: 'Do funny stuff', icon: 'fa-calendar'\"   data-bind= \"click: runMyFunction\" ></li>  </lbs-menu>",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-time/",
            "text": "lbs-local-time\n\n\nTries to parse a time-input and display it in the local time format\n\n\nParams\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ntime\n\n\nA datetime like string or object\n\n\n'2010-10-20'\n\n\n\n\n\n\n\n\nformat\n\n\nA Moment.js formating string\n\n\n'll'\n\n\n'LLLL'\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\nPlease see Moment.js formating strings \nhere\n\n\n\n\nUsage\n\n\n<lbs-local-time\n \nparams=\n\"time: '2018-06-07'\"\n></lbs-local-time>\n\n\n\n\n\n\nOutputs \ntorsdag 7 juni 2018 kl. 23:30\n if locale is \nse\n\n\n\n\nlbs-relative-time\n\n\nTries to parse a time-input and display it in a relative mannor\n\n\nParams\n\n\n\n\n\n\n\n\nParam\n\n\nExplanation\n\n\nExample value\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ntime\n\n\nA datetime like string or object\n\n\n'2010-10-20'\n\n\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\nPlease see Moment.js \ndocs\n\n\n\n\nUsage\n\n\n<lbs-relative-time\n \nparams=\n\"time: '2016-06-07'\"\n></lbs-relative-time>\n\n\n\n\n\n\nOutputs \ntv\u00e5 \u00e5r sedan\n if locale is \nse",
            "title": "Time components"
        },
        {
            "location": "/components/lbs-time/#lbs-local-time",
            "text": "Tries to parse a time-input and display it in the local time format",
            "title": "lbs-local-time"
        },
        {
            "location": "/components/lbs-time/#params",
            "text": "Param  Explanation  Example value  Default value      time  A datetime like string or object  '2010-10-20'     format  A Moment.js formating string  'll'  'LLLL'      Info  Please see Moment.js formating strings  here",
            "title": "Params"
        },
        {
            "location": "/components/lbs-time/#usage",
            "text": "<lbs-local-time   params= \"time: '2018-06-07'\" ></lbs-local-time>   Outputs  torsdag 7 juni 2018 kl. 23:30  if locale is  se",
            "title": "Usage"
        },
        {
            "location": "/components/lbs-time/#lbs-relative-time",
            "text": "Tries to parse a time-input and display it in a relative mannor",
            "title": "lbs-relative-time"
        },
        {
            "location": "/components/lbs-time/#params_1",
            "text": "Param  Explanation  Example value  Default value      time  A datetime like string or object  '2010-10-20'       Info  Please see Moment.js  docs",
            "title": "Params"
        },
        {
            "location": "/components/lbs-time/#usage_1",
            "text": "<lbs-relative-time   params= \"time: '2016-06-07'\" ></lbs-relative-time>   Outputs  tv\u00e5 \u00e5r sedan  if locale is  se",
            "title": "Usage"
        },
        {
            "location": "/changelog/2.x/",
            "text": "Changelog for Lime Bootstrap 2\n\n\n2.0.0\n\n\nLime Bootstrap is a major rewrite of most of Lime Bootstrap. We have moved to a reliable build and packaging and improved tooling. Foundation for new exciting features has been set, such as moving to components and new datasources for the REST-api.\n\n\nChanges\n\n\n\n\nDependencies are managed with npm\n\n\nES6 is used and transpiled with Bable\n\n\nBundeling is moved from Gulp to Brunch.io\n\n\nTests are added with Jest\n\n\nBase views are no longer dynamically loaded\n\n\nDocs and website have been modernized\n\n\nOld debug view is removed, chromiums debuger is the replacement\n\n\nVersion checking of apps and framework is removed, versioning through limeplug is the replacement\n\n\nBetter support for being used inside Chromium\n\n\nMoved most dependencies to latest version, exeptions are Bootstrap and Font Awesome\n\n\nLBS can be run fully decopled from VBA\n\n\n\n\nNew functionality\n\n\n\n\nAdded new built in \ncomponents\n\n\nAdded new \ndata sources\n to use the REST-api and Custom endpoints\n\n\nBuilding apps are replace by building \ncustom components\n\n\n\n\nBreaking changes\n\n\n\n\nxml2json\n has been replaced and functions a tiny bit differently. It just takes a string representing a XML-object as its sole parameter\n\n\nloadDataSource\n has been changed to return the result instead of merging of the supplied model, i.e \ndata = loadDataSource(...)",
            "title": "LBS 2"
        },
        {
            "location": "/changelog/2.x/#changelog-for-lime-bootstrap-2",
            "text": "",
            "title": "Changelog for Lime Bootstrap 2"
        },
        {
            "location": "/changelog/2.x/#200",
            "text": "Lime Bootstrap is a major rewrite of most of Lime Bootstrap. We have moved to a reliable build and packaging and improved tooling. Foundation for new exciting features has been set, such as moving to components and new datasources for the REST-api.",
            "title": "2.0.0"
        },
        {
            "location": "/changelog/2.x/#changes",
            "text": "Dependencies are managed with npm  ES6 is used and transpiled with Bable  Bundeling is moved from Gulp to Brunch.io  Tests are added with Jest  Base views are no longer dynamically loaded  Docs and website have been modernized  Old debug view is removed, chromiums debuger is the replacement  Version checking of apps and framework is removed, versioning through limeplug is the replacement  Better support for being used inside Chromium  Moved most dependencies to latest version, exeptions are Bootstrap and Font Awesome  LBS can be run fully decopled from VBA",
            "title": "Changes"
        },
        {
            "location": "/changelog/2.x/#new-functionality",
            "text": "Added new built in  components  Added new  data sources  to use the REST-api and Custom endpoints  Building apps are replace by building  custom components",
            "title": "New functionality"
        },
        {
            "location": "/changelog/2.x/#breaking-changes",
            "text": "xml2json  has been replaced and functions a tiny bit differently. It just takes a string representing a XML-object as its sole parameter  loadDataSource  has been changed to return the result instead of merging of the supplied model, i.e  data = loadDataSource(...)",
            "title": "Breaking changes"
        },
        {
            "location": "/changelog/1.x/",
            "text": "Changelog for Lime Bootstrap 1\n\n\n1.9\n\n\n\n\nCookies\n\n\nCurrency filter\n\n\nSelectable watch\n\n\nImproved searchability\n\n\nOption keys in VM\n\n\nNo more snow\n\n\nLog to infolog\n\n\nImproved language support\n\n\nFont awesome 4.4\n\n\nInfo about load time for apps and LBS\n\n\n\n\n1.8\n\n\n\n\nSearch for data in the watch\n\n\nImproved log functionality\n\n\nMinified CSS and JavaScript\n\n\nKnockout 3.3\n\n\nFontawesome 4.3\n\n\nMoment 2.10.3\n\n\nTwitter Bootstrap 3.3.5\n\n\n\n\n1.7\n\n\n\n\nNew data carousel\n\n\nNew colors\n\n\nImproved data-bind popover\n\n\nUpdated Font Awsome to 4.2\n\n\nUpdated Bootstrap to 3.2.1\n\n\nAdded utility file Jotnar.js\n\n\n\n\n1.6\n\n\nThis is coming\n\n\n1.5\n\n\n\n\nShortkeys for opening and closing watches and logs\n\n\nA lot of new bindings\n\n\nKnockout 3.1\n\n\nKnockout punches\n\n\nFontawesome 4.1\n\n\n\n\n1.4\n\n\n\n\nBetter watch management\n\n\nLinting and errorhandling\n\n\nBug fixes\n\n\n\n\n1.3\n\n\n\n\nUpdated log functionality\n\n\nNew config solution\n\n\nJoshua - helper to get started with apps\n\n\n\n\n1.2\n\n\n\n\nViewModel viewer\n\n\nRight-click enabled in debugmode\n\n\nNo version check outside if Lime\n\n\n\n\n1.1\n\n\n\n\nBugfix: Handeling of \n_config.js\n now works in IE9\n\n\nBugfix: Index-view won't cause an ugly error any more\n\n\nBugfix: Checking for updates should work better\n\n\n\n\n1.0\n\n\nNOTE: Not backwards compatible, user action needed on upgrade.\n\n\n\n\nThe big 1.0 release! \nuntz\n \nuntz\n \nuntz\n\n\nNOTE:\n Format of \n_config.js\n has changed and the file must be replaced! If you are upgrading and you have modified the file, look at the new format and apply your changed accordingly. Should be a 10 second fix.\n\n\nApps now auto-magically check their versions compared to the latest version available on the appstore. If a newer (and always better) version has been released you can directly downloaded and install it with three clicks and one copy-paste.\n\n\nNew dataSources are available. Most exciting is 'AsyncPost' which combined with a \nproxy server\n for Lime WebService can fetch data without Lime freezing. Great job \nFredrikL!\n\n\n\n\n0.9\n\n\n\n\nNow in Twitter Bootstrap 3.1.\n\n\nHandling of inline and tab views have been improved\n\n\n\n\n0.8\n\n\n\n\nBugs have been eaten!\n\n\n\n\n0.7\n\n\nNOTE: Not backwards compatible, user action need on upgrade.\n\n\n\n\nAdded version checking. If debug is turned on the version of the installed framework is compared with the current version on GitHub. The user is notified and can download a new version.\n\n\nAdded a method to the VBA method \"lbsHelper\". If upgrading, replace old version with new.\n\n\n\n\n0.6\n\n\n\n\nAdded support for insepctorId param in 10.11\n\n\nAdded global config, removed inline config\n\n\nInline config entries in \"comment-style\" should be moved to _config.js\n\n\n\n\n0.5\n\n\n\n\nBugfix: The styling of the menu hover-effekt is imporoved\n\n\nBugfix: Header icon is now properly aligned\n\n\n\n\n0.4\n\n\n\n\nSkins are now supported! Actionpads must be reloaded to apply the skin change.\n\n\n\n\n0.3\n\n\n\n\nUpdated to font awesome 4.0. All icon bindings must be changed to handel the new \"fa-\" naming convention\n\n\nUpdated to Twitter Bootstrap 3.0\n\n\n.nav-header should be change to .menu-header\n\n\n.menu property \"hidden\" should be changed to \"collapsed\"\n\n\n\n\n0.2\n\n\n\n\nReplace header tag \n<div class=\"header-fa-container helpdesk\">\n with \n<div class=\"header-icon\"></div>\n. The image to show will sort itself out.\n\n\nPlace any images you may need in the root folder \"resources\" or a subdirectory of it\n\n\nInvoke old-school apps with the binding \"appInvoke\"\n\n\nRemove div with id #header-info and add class .info-links to the list of info links in the header\n\n\nRemove div with id #content-container",
            "title": "LBS 1"
        },
        {
            "location": "/changelog/1.x/#changelog-for-lime-bootstrap-1",
            "text": "",
            "title": "Changelog for Lime Bootstrap 1"
        },
        {
            "location": "/changelog/1.x/#19",
            "text": "Cookies  Currency filter  Selectable watch  Improved searchability  Option keys in VM  No more snow  Log to infolog  Improved language support  Font awesome 4.4  Info about load time for apps and LBS",
            "title": "1.9"
        },
        {
            "location": "/changelog/1.x/#18",
            "text": "Search for data in the watch  Improved log functionality  Minified CSS and JavaScript  Knockout 3.3  Fontawesome 4.3  Moment 2.10.3  Twitter Bootstrap 3.3.5",
            "title": "1.8"
        },
        {
            "location": "/changelog/1.x/#17",
            "text": "New data carousel  New colors  Improved data-bind popover  Updated Font Awsome to 4.2  Updated Bootstrap to 3.2.1  Added utility file Jotnar.js",
            "title": "1.7"
        },
        {
            "location": "/changelog/1.x/#16",
            "text": "This is coming",
            "title": "1.6"
        },
        {
            "location": "/changelog/1.x/#15",
            "text": "Shortkeys for opening and closing watches and logs  A lot of new bindings  Knockout 3.1  Knockout punches  Fontawesome 4.1",
            "title": "1.5"
        },
        {
            "location": "/changelog/1.x/#14",
            "text": "Better watch management  Linting and errorhandling  Bug fixes",
            "title": "1.4"
        },
        {
            "location": "/changelog/1.x/#13",
            "text": "Updated log functionality  New config solution  Joshua - helper to get started with apps",
            "title": "1.3"
        },
        {
            "location": "/changelog/1.x/#12",
            "text": "ViewModel viewer  Right-click enabled in debugmode  No version check outside if Lime",
            "title": "1.2"
        },
        {
            "location": "/changelog/1.x/#11",
            "text": "Bugfix: Handeling of  _config.js  now works in IE9  Bugfix: Index-view won't cause an ugly error any more  Bugfix: Checking for updates should work better",
            "title": "1.1"
        },
        {
            "location": "/changelog/1.x/#10",
            "text": "NOTE: Not backwards compatible, user action needed on upgrade.   The big 1.0 release!  untz   untz   untz  NOTE:  Format of  _config.js  has changed and the file must be replaced! If you are upgrading and you have modified the file, look at the new format and apply your changed accordingly. Should be a 10 second fix.  Apps now auto-magically check their versions compared to the latest version available on the appstore. If a newer (and always better) version has been released you can directly downloaded and install it with three clicks and one copy-paste.  New dataSources are available. Most exciting is 'AsyncPost' which combined with a  proxy server  for Lime WebService can fetch data without Lime freezing. Great job  FredrikL!",
            "title": "1.0"
        },
        {
            "location": "/changelog/1.x/#09",
            "text": "Now in Twitter Bootstrap 3.1.  Handling of inline and tab views have been improved",
            "title": "0.9"
        },
        {
            "location": "/changelog/1.x/#08",
            "text": "Bugs have been eaten!",
            "title": "0.8"
        },
        {
            "location": "/changelog/1.x/#07",
            "text": "NOTE: Not backwards compatible, user action need on upgrade.   Added version checking. If debug is turned on the version of the installed framework is compared with the current version on GitHub. The user is notified and can download a new version.  Added a method to the VBA method \"lbsHelper\". If upgrading, replace old version with new.",
            "title": "0.7"
        },
        {
            "location": "/changelog/1.x/#06",
            "text": "Added support for insepctorId param in 10.11  Added global config, removed inline config  Inline config entries in \"comment-style\" should be moved to _config.js",
            "title": "0.6"
        },
        {
            "location": "/changelog/1.x/#05",
            "text": "Bugfix: The styling of the menu hover-effekt is imporoved  Bugfix: Header icon is now properly aligned",
            "title": "0.5"
        },
        {
            "location": "/changelog/1.x/#04",
            "text": "Skins are now supported! Actionpads must be reloaded to apply the skin change.",
            "title": "0.4"
        },
        {
            "location": "/changelog/1.x/#03",
            "text": "Updated to font awesome 4.0. All icon bindings must be changed to handel the new \"fa-\" naming convention  Updated to Twitter Bootstrap 3.0  .nav-header should be change to .menu-header  .menu property \"hidden\" should be changed to \"collapsed\"",
            "title": "0.3"
        },
        {
            "location": "/changelog/1.x/#02",
            "text": "Replace header tag  <div class=\"header-fa-container helpdesk\">  with  <div class=\"header-icon\"></div> . The image to show will sort itself out.  Place any images you may need in the root folder \"resources\" or a subdirectory of it  Invoke old-school apps with the binding \"appInvoke\"  Remove div with id #header-info and add class .info-links to the list of info links in the header  Remove div with id #content-container",
            "title": "0.2"
        }
    ]
}